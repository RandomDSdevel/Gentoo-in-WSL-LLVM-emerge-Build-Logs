declare -x ABI="amd64"
declare -x ABI_MIPS=""
declare -x ABI_S390=""
declare -x ABI_X86="64"
declare -x ADA_TARGET=""
declare -a ALL_LLVM_EXPERIMENTAL_TARGETS=([0]="ARC" [1]="CSKY" [2]="M68k" [3]="VE")
declare -a ALL_LLVM_PRODUCTION_TARGETS=([0]="AArch64" [1]="AMDGPU" [2]="ARM" [3]="AVR" [4]="BPF" [5]="Hexagon" [6]="Lanai" [7]="Mips" [8]="MSP430" [9]="NVPTX" [10]="PowerPC" [11]="RISCV" [12]="Sparc" [13]="SystemZ" [14]="WebAssembly" [15]="X86" [16]="XCore")
declare -a ALL_LLVM_TARGET_FLAGS=([0]="llvm_targets_AArch64" [1]="llvm_targets_AMDGPU" [2]="llvm_targets_ARM" [3]="llvm_targets_AVR" [4]="llvm_targets_BPF" [5]="llvm_targets_Hexagon" [6]="llvm_targets_Lanai" [7]="llvm_targets_Mips" [8]="llvm_targets_MSP430" [9]="llvm_targets_NVPTX" [10]="llvm_targets_PowerPC" [11]="llvm_targets_RISCV" [12]="llvm_targets_Sparc" [13]="llvm_targets_SystemZ" [14]="llvm_targets_WebAssembly" [15]="llvm_targets_X86" [16]="llvm_targets_XCore" [17]="llvm_targets_ARC" [18]="llvm_targets_CSKY" [19]="llvm_targets_M68k" [20]="llvm_targets_VE")
declare -x ALSA_CARDS=""
declare -x APACHE2_MODULES=""
declare -x APACHE2_MPMS=""
declare -x AR="llvm-ar"
declare -x ARCH="amd64"
declare BDEPEND="
	dev-lang/perl
	>=dev-util/cmake-3.16
	sys-devel/gnuconfig
	kernel_Darwin? (
		<sys-libs/libcxx-13.0.1.9999
		>=sys-devel/binutils-apple-5.1
	)
	doc? ( || ( ( >=dev-lang/python-3.10.0_p1-r1:3.10 
		dev-python/recommonmark[python_targets_python3_10(-)]
		dev-python/sphinx[python_targets_python3_10(-)]
	 ) ( >=dev-lang/python-3.9.9-r1:3.9 
		dev-python/recommonmark[python_targets_python3_9(-)]
		dev-python/sphinx[python_targets_python3_9(-)]
	 ) ( >=dev-lang/python-3.8.12_p1-r1:3.8 
		dev-python/recommonmark[python_targets_python3_8(-)]
		dev-python/sphinx[python_targets_python3_8(-)]
	 ) ) )
	libffi? ( virtual/pkgconfig )
	|| ( >=dev-lang/python-3.10.0_p1-r1:3.10 >=dev-lang/python-3.9.9-r1:3.9 >=dev-lang/python-3.8.12_p1-r1:3.8 ) dev-util/ninja >=dev-util/cmake-3.20.5"
declare -x BOOTSTRAP_USE="unicode internal-glib pkg-config split-usr xml python_targets_python3_9 multilib"
declare -- BUILD_DIR="/var/tmp/portage/sys-devel/llvm-13.0.1/work/llvm-13.0.1_build"
declare -x CALLIGRA_FEATURES=""
declare -x CAMERAS=""
declare -x CBUILD="x86_64-pc-linux-gnu"
declare -x CC="clang"
declare -x CFLAGS="-march=native -mtune=native -O2 -pipe -flto=thin"
declare -x CFLAGS_amd64="-m64"
declare -x CFLAGS_default
declare -x CFLAGS_x32="-mx32"
declare -x CFLAGS_x86="-m32"
declare -x CHOST="x86_64-pc-linux-gnu"
declare -x CHOST_amd64="x86_64-pc-linux-gnu"
declare -x CHOST_default="x86_64-pc-linux-gnu"
declare -x CHOST_x32="x86_64-pc-linux-gnux32"
declare -x CHOST_x86="i686-pc-linux-gnu"
declare -- CMAKE_BINARY="cmake"
declare -- CMAKE_BUILD_TYPE="RelWithDebInfo"
declare -- CMAKE_MAKEFILE_GENERATOR="ninja"
declare -a CMAKE_REMOVE_MODULES_LIST=([0]="FindBLAS" [1]="FindLAPACK")
declare -- CMAKE_USE_DIR="/var/tmp/portage/sys-devel/llvm-13.0.1/work/llvm"
declare -- CMAKE_VERBOSE="ON"
declare -- CMAKE_WARN_UNUSED_CLI="yes"
declare -x COLLECTD_PLUGINS=""
declare -x COMMON_FLAGS="-march=native -mtune=native -O2 -pipe"
declare -x CPU_FLAGS_ARM=""
declare -x CPU_FLAGS_PPC=""
declare -x CPU_FLAGS_X86=""
declare -x CTARGET_default="x86_64-pc-linux-gnu"
declare -x CURL_SSL=""
declare -x CXX="clang++"
declare -x CXXFLAGS="-march=native -mtune=native -O2 -pipe -flto=thin"
declare -x DEFAULT_ABI="amd64"
declare -x DEFINED_PHASES=" compile configure install postinst prepare setup test unpack"
declare DEPEND="
	sys-libs/zlib:0=[abi_x86_32(-)?,abi_x86_64(-)?,abi_x86_x32(-)?,abi_mips_n32(-)?,abi_mips_n64(-)?,abi_mips_o32(-)?,abi_s390_32(-)?,abi_s390_64(-)?]
	binutils-plugin? ( >=sys-devel/binutils-2.31.1-r4:*[plugins] )
	exegesis? ( dev-libs/libpfm:= )
	libedit? ( dev-libs/libedit:0=[abi_x86_32(-)?,abi_x86_64(-)?,abi_x86_x32(-)?,abi_mips_n32(-)?,abi_mips_n64(-)?,abi_mips_o32(-)?,abi_s390_32(-)?,abi_s390_64(-)?] )
	libffi? ( >=dev-libs/libffi-3.0.13-r1:0=[abi_x86_32(-)?,abi_x86_64(-)?,abi_x86_x32(-)?,abi_mips_n32(-)?,abi_mips_n64(-)?,abi_mips_o32(-)?,abi_s390_32(-)?,abi_s390_64(-)?] )
	ncurses? ( >=sys-libs/ncurses-5.9-r3:0=[abi_x86_32(-)?,abi_x86_64(-)?,abi_x86_x32(-)?,abi_mips_n32(-)?,abi_mips_n64(-)?,abi_mips_o32(-)?,abi_s390_32(-)?,abi_s390_64(-)?] )
	xar? ( app-arch/xar )
	xml? ( dev-libs/libxml2:2=[abi_x86_32(-)?,abi_x86_64(-)?,abi_x86_x32(-)?,abi_mips_n32(-)?,abi_mips_n64(-)?,abi_mips_o32(-)?,abi_s390_32(-)?,abi_s390_64(-)?] )
	z3? ( >=sci-mathematics/z3-4.7.1:0=[abi_x86_32(-)?,abi_x86_64(-)?,abi_x86_x32(-)?,abi_mips_n32(-)?,abi_mips_n64(-)?,abi_mips_o32(-)?,abi_s390_32(-)?,abi_s390_64(-)?] )
	binutils-plugin? ( sys-libs/binutils-libs ) "
declare DESCRIPTION="Low Level Virtual Machine"
declare -- DESKTOP_DATABASE_DIR="/usr/share/applications"
declare -x DIROPTIONS="-m0755"
declare -x EAPI="7"
declare -x ELIBC="glibc"
declare -x ENV_UNSET="CARGO_HOME DBUS_SESSION_BUS_ADDRESS DISPLAY GOBIN GOPATH PERL5LIB PERL5OPT PERLPREFIX PERL_CORE PERL_MB_OPT PERL_MM_OPT XAUTHORITY XDG_CACHE_HOME XDG_CONFIG_HOME XDG_DATA_HOME XDG_RUNTIME_DIR"
declare -- EPOCHREALTIME="1651783526.864809"
declare -- EPOCHSECONDS="1651783526"
declare -x EPYTHON="python3.10"
declare -x EXEOPTIONS="-m0755"
declare -x FCFLAGS="-march=native -mtune=native -O2 -pipe"
declare -x FETCHCOMMAND_SSH="bash -c \"x=\\\${2#ssh://} ; host=\\\${x%%/*} ; port=\\\${host##*:} ; host=\\\${host%:*} ; [[ \\\${host} = \\\${port} ]] && port= ; exec rsync --rsh=\\\"ssh \\\${port:+-p\\\${port}} \\\${3}\\\" -avP \\\"\\\${host}:/\\\${x#*/}\\\" \\\"\\\$1\\\"\" rsync \"\${DISTDIR}/\${FILE}\" \"\${URI}\" \"\${PORTAGE_SSH_OPTS}\""
declare -x FFLAGS="-march=native -mtune=native -O2 -pipe"
declare -x FFTOOLS=""
declare -x GCC_SPECS=""
declare -x GPSD_PROTOCOLS=""
declare -x GRUB_PLATFORMS=""
declare -x GSETTINGS_BACKEND="dconf"
declare HOMEPAGE="https://llvm.org/"
declare IDEPEND
declare -x INHERITED=" toolchain-funcs multilib edos2unix strip-linguas wrapper eutils flag-o-matic multiprocessing ninja-utils xdg-utils cmake llvm.org multibuild multilib-build multilib-minimal pax-utils eapi8-dosym python-utils-r1 python-any-r1"
declare -x INPUT_DEVICES=""
declare -x INSOPTIONS="-m0644"
declare IUSE="+binutils-plugin debug doc exegesis libedit +libffi ncurses test xar xml z3 doc llvm_targets_AArch64 llvm_targets_AMDGPU llvm_targets_ARM llvm_targets_AVR llvm_targets_BPF llvm_targets_Hexagon llvm_targets_Lanai llvm_targets_Mips llvm_targets_MSP430 llvm_targets_NVPTX llvm_targets_PowerPC llvm_targets_RISCV llvm_targets_Sparc llvm_targets_SystemZ llvm_targets_WebAssembly llvm_targets_X86 llvm_targets_XCore llvm_targets_ARC llvm_targets_CSKY llvm_targets_M68k llvm_targets_VE abi_x86_32 abi_x86_64 abi_x86_x32 abi_mips_n32 abi_mips_n64 abi_mips_o32 abi_s390_32 abi_s390_64"
declare -x IUSE_EFFECTIVE="abi_mips_n32 abi_mips_n64 abi_mips_o32 abi_s390_32 abi_s390_64 abi_x86_32 abi_x86_64 abi_x86_x32 alpha amd64 amd64-linux arm arm64 arm64-macos binutils-plugin debug doc elibc_Cygwin elibc_Darwin elibc_SunOS elibc_Winnt elibc_bionic elibc_glibc elibc_mingw elibc_musl exegesis hppa ia64 kernel_Darwin kernel_SunOS kernel_Winnt kernel_linux libedit libffi llvm_targets_AArch64 llvm_targets_AMDGPU llvm_targets_ARC llvm_targets_ARM llvm_targets_AVR llvm_targets_BPF llvm_targets_CSKY llvm_targets_Hexagon llvm_targets_Lanai llvm_targets_M68k llvm_targets_MSP430 llvm_targets_Mips llvm_targets_NVPTX llvm_targets_PowerPC llvm_targets_RISCV llvm_targets_Sparc llvm_targets_SystemZ llvm_targets_VE llvm_targets_WebAssembly llvm_targets_X86 llvm_targets_XCore loong m68k mips ncurses ppc ppc-macos ppc64 ppc64-linux prefix prefix-guest prefix-stack riscv s390 sparc sparc-solaris sparc64-solaris test userland_BSD userland_GNU x64-cygwin x64-macos x64-solaris x64-winnt x86 x86-linux x86-solaris x86-winnt xar xml z3"
declare -x IUSE_IMPLICIT="abi_x86_64 prefix prefix-guest prefix-stack"
declare -x KERNEL="linux"
declare -x KERNEL_ABI="amd64"
declare -x KEYWORDS="amd64 arm arm64 ~ppc ppc64 ~riscv ~sparc x86 ~amd64-linux ~ppc-macos ~x64-macos"
declare -x L10N=""
declare -x LANG="en_US.utf8"
declare -x LCD_DEVICES=""
declare -x LC_COLLATE="C"
declare -x LC_MESSAGES="C"
declare -x LDFLAGS="-fuse-ld=lld -rtlib=compiler-rt -unwindlib=libunwind -Wl,-O2 -Wl,--as-needed -Wl,-z,relro,-z,now"
declare -x LDFLAGS_amd64="-m elf_x86_64"
declare -x LDFLAGS_default
declare -x LDFLAGS_x32="-m elf32_x86_64"
declare -x LDFLAGS_x86="-m elf_i386"
declare -x LIBDIR_amd64="lib64"
declare -x LIBDIR_default="lib"
declare -x LIBDIR_x32="libx32"
declare -x LIBDIR_x86="lib"
declare -x LIBOPTIONS="-m0644"
declare -x LIBREOFFICE_EXTENSIONS=""
declare -x LICENSE="Apache-2.0-with-LLVM-exceptions UoI-NCSA BSD public-domain rc"
declare -x LINES="39"
declare -a LLVM_COMPONENTS=([0]="llvm")
declare -- LLVM_MANPAGES="pregenerated"
declare -- LLVM_PATCHSET="13.0.1"
declare -x LLVM_TARGETS="NVPTX Lanai Sparc PowerPC BPF AMDGPU X86 XCore MSP430 SystemZ ARM Mips AArch64 Hexagon AVR WebAssembly RISCV"
declare -- LLVM_USE_TARGETS="provide"
declare -x LUA_SINGLE_TARGET=""
declare -x LUA_TARGETS=""
declare -x MAIL="/var/mail/root"
declare -x MAKEOPTS="-j4"
declare -x MANPAGER="manpager"
declare -- MIMEINFO_DATABASE_DIR="/usr/share/mime"
declare -x MONKEYD_PLUGINS=""
declare -x MULTILIB_ABIS="amd64 x86"
declare -x MULTILIB_STRICT_DENY="64-bit.*shared object"
declare -x MULTILIB_STRICT_DIRS="/lib32 /lib /usr/lib32 /usr/lib /usr/kde/*/lib32 /usr/kde/*/lib /usr/qt/*/lib32 /usr/qt/*/lib /usr/X11R6/lib32 /usr/X11R6/lib"
declare -x MULTILIB_STRICT_EXEMPT="(perl5|gcc|binutils|eclipse-3|debug|portage|udev|systemd|clang|python-exec|llvm)"
declare -- MULTILIB_USEDEP="abi_x86_32(-)?,abi_x86_64(-)?,abi_x86_x32(-)?,abi_mips_n32(-)?,abi_mips_n64(-)?,abi_mips_o32(-)?,abi_s390_32(-)?,abi_s390_64(-)?"
declare -x NGINX_MODULES_HTTP=""
declare -x NGINX_MODULES_MAIL=""
declare -x NGINX_MODULES_STREAM=""
declare -x NM="llvm-nm"
declare -x OFED_DRIVERS=""
declare -x OFFICE_IMPLEMENTATION=""
declare -x OPENMPI_FABRICS=""
declare -x OPENMPI_OFED_FEATURES=""
declare -x OPENMPI_RM=""
declare -x PATH="/var/tmp/portage/sys-devel/llvm-13.0.1/temp/python3.10/bin:/usr/lib/portage/python3.9/ebuild-helpers/xattr:/usr/lib/portage/python3.9/ebuild-helpers:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/bin:/usr/lib/llvm/13/bin:/usr/lib/llvm/12/bin"
declare -- PAX_MARKINGS="none"
declare PDEPEND="sys-devel/llvm-common
	binutils-plugin? ( >=sys-devel/llvmgold-13 ) "
declare -x PHP_TARGETS=""
declare -x PKG_CONFIG_PATH="/var/tmp/portage/sys-devel/llvm-13.0.1/temp/python3.10/pkgconfig"
declare -x PORTAGE_COMPRESSION_COMMAND="bzip2"
declare -a PORTAGE_DOCOMPRESS=([0]="/usr/share/doc" [1]="/usr/share/info" [2]="/usr/share/man")
declare -x PORTAGE_DOCOMPRESS_SIZE_LIMIT="128"
declare -a PORTAGE_DOCOMPRESS_SKIP=([0]="/usr/share/doc/llvm-13.0.1/html")
declare -a PORTAGE_DOSTRIP=([0]="/")
declare -a PORTAGE_DOSTRIP_SKIP=()
declare -x POSTGRES_TARGETS=""
declare -x PROFILE_ONLY_VARIABLES="ARCH ELIBC IUSE_IMPLICIT KERNEL USERLAND USE_EXPAND_IMPLICIT USE_EXPAND_UNPREFIXED USE_EXPAND_VALUES_ARCH USE_EXPAND_VALUES_ELIBC USE_EXPAND_VALUES_KERNEL USE_EXPAND_VALUES_USERLAND"
declare -- PROPERTIES=""
declare -x PYTHON="/usr/bin/python3.10"
declare -x PYTHONDONTWRITEBYTECODE="1"
declare -a PYTHON_COMPAT=([0]="python3_8" [1]="python3_9" [2]="python3_10")
declare -- PYTHON_DEPS="|| ( >=dev-lang/python-3.10.0_p1-r1:3.10 >=dev-lang/python-3.9.9-r1:3.9 >=dev-lang/python-3.8.12_p1-r1:3.8 )"
declare -- PYTHON_REQUIRED_USE="I-DO-NOT-EXIST-IN-PYTHON-ANY-R1"
declare -x PYTHON_SINGLE_TARGET=""
declare -x PYTHON_TARGETS=""
declare -x QEMU_SOFTMMU_TARGETS=""
declare -x QEMU_USER_TARGETS=""
declare -x RANLIB="llvm-ranlib"
declare RDEPEND="
	sys-libs/zlib:0=[abi_x86_32(-)?,abi_x86_64(-)?,abi_x86_x32(-)?,abi_mips_n32(-)?,abi_mips_n64(-)?,abi_mips_o32(-)?,abi_s390_32(-)?,abi_s390_64(-)?]
	binutils-plugin? ( >=sys-devel/binutils-2.31.1-r4:*[plugins] )
	exegesis? ( dev-libs/libpfm:= )
	libedit? ( dev-libs/libedit:0=[abi_x86_32(-)?,abi_x86_64(-)?,abi_x86_x32(-)?,abi_mips_n32(-)?,abi_mips_n64(-)?,abi_mips_o32(-)?,abi_s390_32(-)?,abi_s390_64(-)?] )
	libffi? ( >=dev-libs/libffi-3.0.13-r1:0=[abi_x86_32(-)?,abi_x86_64(-)?,abi_x86_x32(-)?,abi_mips_n32(-)?,abi_mips_n64(-)?,abi_mips_o32(-)?,abi_s390_32(-)?,abi_s390_64(-)?] )
	ncurses? ( >=sys-libs/ncurses-5.9-r3:0=[abi_x86_32(-)?,abi_x86_64(-)?,abi_x86_x32(-)?,abi_mips_n32(-)?,abi_mips_n64(-)?,abi_mips_o32(-)?,abi_s390_32(-)?,abi_s390_64(-)?] )
	xar? ( app-arch/xar )
	xml? ( dev-libs/libxml2:2=[abi_x86_32(-)?,abi_x86_64(-)?,abi_x86_x32(-)?,abi_mips_n32(-)?,abi_mips_n64(-)?,abi_mips_o32(-)?,abi_s390_32(-)?,abi_s390_64(-)?] )
	z3? ( >=sci-mathematics/z3-4.7.1:0=[abi_x86_32(-)?,abi_x86_64(-)?,abi_x86_x32(-)?,abi_mips_n32(-)?,abi_mips_n64(-)?,abi_mips_o32(-)?,abi_s390_32(-)?,abi_s390_64(-)?] )
	!sys-devel/llvm:0 "
declare REPOSITORY
declare REQUIRED_USE=" || ( llvm_targets_AArch64 llvm_targets_AMDGPU llvm_targets_ARM llvm_targets_AVR llvm_targets_BPF llvm_targets_Hexagon llvm_targets_Lanai llvm_targets_Mips llvm_targets_MSP430 llvm_targets_NVPTX llvm_targets_PowerPC llvm_targets_RISCV llvm_targets_Sparc llvm_targets_SystemZ llvm_targets_WebAssembly llvm_targets_X86 llvm_targets_XCore llvm_targets_ARC llvm_targets_CSKY llvm_targets_M68k llvm_targets_VE ) "
declare RESTRICT="test"
declare -x RESUMECOMMAND_SSH="bash -c \"x=\\\${2#ssh://} ; host=\\\${x%%/*} ; port=\\\${host##*:} ; host=\\\${host%:*} ; [[ \\\${host} = \\\${port} ]] && port= ; exec rsync --rsh=\\\"ssh \\\${port:+-p\\\${port}} \\\${3}\\\" -avP \\\"\\\${host}:/\\\${x#*/}\\\" \\\"\\\$1\\\"\" rsync \"\${DISTDIR}/\${FILE}\" \"\${URI}\" \"\${PORTAGE_SSH_OPTS}\""
declare -x ROS_MESSAGES=""
declare -x RUBY_TARGETS=""
declare -x S="/var/tmp/portage/sys-devel/llvm-13.0.1/work/llvm"
declare -x SANDBOX_DEBUG="0"
declare -x SANDBOX_DENY=""
declare -x SANDBOX_METHOD="any"
declare -x SANDBOX_PREDICT="/var/tmp/portage/sys-devel/llvm-13.0.1/homedir:/dev/crypto:/var/cache/man:/var/cache/fontconfig"
declare -x SANDBOX_READ="/:/var/tmp/portage"
declare -x SANDBOX_VERBOSE="1"
declare -x SANDBOX_WRITE=":/dev/console:/dev/fd:/dev/full:/dev/null:/dev/ptmx:/dev/pts/:/dev/pty:/dev/shm:/dev/tts:/dev/tty:/dev/vc/:/dev/zero:/proc/self/fd:/tmp/:/usr/lib/cf:/usr/lib/conftest:/usr/lib32/cf:/usr/lib32/conftest:/usr/lib64/cf:/usr/lib64/conftest:/usr/tmp/:/usr/tmp/cf:/usr/tmp/conftest:/var/tmp/:/var/tmp/portage:/var/tmp/portage/sys-devel/llvm-13.0.1/homedir/.bash_history"
declare -x SANE_BACKENDS=""
declare -x SHELL="/bin/bash"
declare -x SLOT="13"
declare -i SRANDOM="1463964572"
declare SRC_URI="
			https://github.com/llvm/llvm-project/archive/llvmorg-13.0.1.tar.gz
				!doc? (
					https://dev.gentoo.org/~mgorny/dist/llvm/llvm-13.0.1-manpages.tar.bz2
				)
			https://dev.gentoo.org/~mgorny/dist/llvm/llvm-gentoo-patchset-13.0.1.tar.xz"
declare -x SUDO_COMMAND="/bin/bash"
declare -x SUDO_GID="1000"
declare -x SUDO_UID="1000"
declare -x SUDO_USER="zadmin"
declare -x SYMLINK_LIB="no"
declare -x TWISTED_DISABLE_WRITING_OF_PLUGIN_CACHE="1"
declare -x USE="abi_x86_64 amd64 binutils-plugin elibc_glibc kernel_linux libffi llvm_targets_AArch64 llvm_targets_AMDGPU llvm_targets_ARM llvm_targets_AVR llvm_targets_BPF llvm_targets_Hexagon llvm_targets_Lanai llvm_targets_MSP430 llvm_targets_Mips llvm_targets_NVPTX llvm_targets_PowerPC llvm_targets_RISCV llvm_targets_Sparc llvm_targets_SystemZ llvm_targets_WebAssembly llvm_targets_X86 llvm_targets_XCore ncurses userland_GNU xml"
declare -x USERLAND="GNU"
declare -x USE_EXPAND_IMPLICIT="ARCH ELIBC KERNEL USERLAND"
declare -x USE_EXPAND_UNPREFIXED="ARCH"
declare -x USE_EXPAND_VALUES_ARCH="alpha amd64 amd64-linux arm arm64 arm64-macos hppa ia64 loong m68k mips ppc ppc64 ppc64-linux ppc-macos riscv s390 sparc sparc64-solaris sparc-solaris x64-cygwin x64-macos x64-solaris x64-winnt x86 x86-linux x86-solaris x86-winnt"
declare -x USE_EXPAND_VALUES_ELIBC="bionic Cygwin Darwin glibc mingw musl SunOS Winnt"
declare -x USE_EXPAND_VALUES_KERNEL="Darwin linux SunOS Winnt"
declare -x USE_EXPAND_VALUES_USERLAND="BSD GNU"
declare -x UWSGI_PLUGINS=""
declare -x VIDEO_CARDS=""
declare -x VOICEMAIL_STORAGE=""
declare -x XDG_CONFIG_DIRS="/etc/xdg"
declare -x XDG_DATA_DIRS="/usr/local/share:/usr/share"
declare -x XTABLES_ADDONS=""
declare -- _CMAKE_ECLASS="1"
declare -- _CMAKE_SRC_PREPARE_HAS_RUN="1"
declare -- _EUTILS_ECLASS="1"
declare -x _E_DESTTREE_="/usr"
declare -x _E_DOCDESTTREE_=""
declare -x _E_EXEDESTTREE_=""
declare -x _E_INSDESTTREE_=""
declare -- _FLAG_O_MATIC_ECLASS="1"
declare -- _LLVM_MASTER_MAJOR="15"
declare -- _LLVM_ORG_SET_GLOBALS_CALLED="1"
declare -- _LLVM_SOURCE_TYPE="tar"
declare -- _MULTIBUILD_ECLASS="1"
declare -- _MULTILIB_BUILD_ECLASS="1"
declare -- _MULTILIB_ECLASS="1"
declare -a _MULTILIB_FLAGS=([0]="abi_x86_32:x86,x86_fbsd,x86_freebsd,x86_linux,x86_macos,x86_solaris" [1]="abi_x86_64:amd64,amd64_fbsd,x64_freebsd,amd64_linux,x64_macos,x64_solaris" [2]="abi_x86_x32:x32" [3]="abi_mips_n32:n32" [4]="abi_mips_n64:n64" [5]="abi_mips_o32:o32" [6]="abi_s390_32:s390" [7]="abi_s390_64:s390x")
declare -- _MULTILIB_MINIMAL_ECLASS="1"
declare -- _MULTIPROCESSING_ECLASS="1"
declare -- _NINJA_UTILS_ECLASS="1"
declare -- _PAX_UTILS_ECLASS="1"
declare -a _PYTHON_ALL_IMPLS=([0]="pypy3" [1]="python3_8" [2]="python3_9" [3]="python3_10")
declare -- _PYTHON_ANY_R1="1"
declare -a _PYTHON_HISTORICAL_IMPLS=([0]="jython2_7" [1]="pypy" [2]="pypy1_8" [3]="pypy1_9" [4]="pypy2_0" [5]="python2_5" [6]="python2_6" [7]="python2_7" [8]="python3_1" [9]="python3_2" [10]="python3_3" [11]="python3_4" [12]="python3_5" [13]="python3_6" [14]="python3_7")
declare -a _PYTHON_SUPPORTED_IMPLS=([0]="python3_8" [1]="python3_9" [2]="python3_10")
declare -a _PYTHON_UNSUPPORTED_IMPLS=([0]="pypy3")
declare -- _PYTHON_UTILS_R1="1"
declare -- _STRIP_LINGUAS_ECLASS="1"
declare -- _TOOLCHAIN_FUNCS_ECLASS="1"
declare -- _WRAPPER_ECLASS="1"
declare -x enable_year2038="no"
declare -- i="2"
__eapi6_src_install () 
{ 
    if [[ -f Makefile || -f GNUmakefile || -f makefile ]]; then
        emake DESTDIR="${D}" install;
    fi;
    einstalldocs
}
__eapi6_src_prepare () 
{ 
    if ___is_indexed_array_var PATCHES; then
        [[ ${#PATCHES[@]} -gt 0 ]] && eapply "${PATCHES[@]}";
    else
        if [[ -n ${PATCHES} ]]; then
            eapply ${PATCHES};
        fi;
    fi;
    eapply_user
}
__eapi7_ver_compare () 
{ 
    local va=${1} vb=${2} a an al as ar b bn bl bs br re LC_ALL=C;
    re="^([0-9]+(\.[0-9]+)*)([a-z]?)((_(alpha|beta|pre|rc|p)[0-9]*)*)(-r[0-9]+)?$";
    [[ ${va} =~ ${re} ]] || die "${FUNCNAME}: invalid version: ${va}";
    an=${BASH_REMATCH[1]};
    al=${BASH_REMATCH[3]};
    as=${BASH_REMATCH[4]};
    ar=${BASH_REMATCH[7]};
    [[ ${vb} =~ ${re} ]] || die "${FUNCNAME}: invalid version: ${vb}";
    bn=${BASH_REMATCH[1]};
    bl=${BASH_REMATCH[3]};
    bs=${BASH_REMATCH[4]};
    br=${BASH_REMATCH[7]};
    __eapi7_ver_compare_int "${an%%.*}" "${bn%%.*}" || return;
    while [[ ${an} == *.* && ${bn} == *.* ]]; do
        an=${an#*.};
        bn=${bn#*.};
        a=${an%%.*};
        b=${bn%%.*};
        if [[ ${a} == 0* || ${b} == 0* ]]; then
            [[ ${a} =~ 0+$ ]] && a=${a%"${BASH_REMATCH[0]}"};
            [[ ${b} =~ 0+$ ]] && b=${b%"${BASH_REMATCH[0]}"};
            [[ ${a} > ${b} ]] && return 3;
            [[ ${a} < ${b} ]] && return 1;
        else
            __eapi7_ver_compare_int "${a}" "${b}" || return;
        fi;
    done;
    [[ ${an} == *.* ]] && return 3;
    [[ ${bn} == *.* ]] && return 1;
    [[ ${al} > ${bl} ]] && return 3;
    [[ ${al} < ${bl} ]] && return 1;
    as=${as#_}${as:+_};
    bs=${bs#_}${bs:+_};
    while [[ -n ${as} && -n ${bs} ]]; do
        a=${as%%_*};
        b=${bs%%_*};
        if [[ ${a%%[0-9]*} == "${b%%[0-9]*}" ]]; then
            __eapi7_ver_compare_int "${a##*[a-z]}" "${b##*[a-z]}" || return;
        else
            [[ ${a%%[0-9]*} == p ]] && return 3;
            [[ ${b%%[0-9]*} == p ]] && return 1;
            [[ ${a} > ${b} ]] && return 3 || return 1;
        fi;
        as=${as#*_};
        bs=${bs#*_};
    done;
    if [[ -n ${as} ]]; then
        [[ ${as} == p[_0-9]* ]] && return 3 || return 1;
    else
        if [[ -n ${bs} ]]; then
            [[ ${bs} == p[_0-9]* ]] && return 1 || return 3;
        fi;
    fi;
    __eapi7_ver_compare_int "${ar#-r}" "${br#-r}" || return;
    return 2
}
__eapi7_ver_compare_int () 
{ 
    local a=$1 b=$2 d=$(( ${#1}-${#2} ));
    if [[ ${d} -gt 0 ]]; then
        printf -v b "%0${d}d%s" 0 "${b}";
    else
        if [[ ${d} -lt 0 ]]; then
            printf -v a "%0$(( -d ))d%s" 0 "${a}";
        fi;
    fi;
    [[ ${a} > ${b} ]] && return 3;
    [[ ${a} == "${b}" ]]
}
__eapi7_ver_parse_range () 
{ 
    local range=${1};
    local max=${2};
    [[ ${range} == [0-9]* ]] || die "${FUNCNAME}: range must start with a number";
    start=${range%-*};
    [[ ${range} == *-* ]] && end=${range#*-} || end=${start};
    if [[ -n ${end} ]]; then
        [[ ${start} -le ${end} ]] || die "${FUNCNAME}: end of range must be >= start";
        [[ ${end} -le ${max} ]] || end=${max};
    else
        end=${max};
    fi
}
__eapi7_ver_split () 
{ 
    local v=${1} LC_ALL=C;
    comp=();
    local s c;
    while [[ -n ${v} ]]; do
        s=${v%%[a-zA-Z0-9]*};
        v=${v:${#s}};
        [[ ${v} == [0-9]* ]] && c=${v%%[^0-9]*} || c=${v%%[^a-zA-Z]*};
        v=${v:${#c}};
        comp+=("${s}" "${c}");
    done
}
__eapi8_src_prepare () 
{ 
    local f;
    if ___is_indexed_array_var PATCHES; then
        [[ ${#PATCHES[@]} -gt 0 ]] && eapply -- "${PATCHES[@]}";
    else
        if [[ -n ${PATCHES} ]]; then
            eapply -- ${PATCHES};
        fi;
    fi;
    eapply_user
}
_clang_fullversion () 
{ 
    local ver="$1";
    shift;
    set -- $($(tc-getCPP "$@") -E -P - <<<"__clang_major__ __clang_minor__ __clang_patchlevel__");
    eval echo "$ver"
}
_cmake_banned_func () 
{ 
    die "${FUNCNAME[1]} is banned. use -D$1<related_CMake_variable>=\"\$(usex $2)\" instead"
}
_cmake_check_build_dir () 
{ 
    if [[ ${EAPI} == 7 ]]; then
        : ${CMAKE_USE_DIR:=${S}};
    else
        : ${CMAKE_USE_DIR:=${PWD}};
    fi;
    if [[ -n ${CMAKE_IN_SOURCE_BUILD} ]]; then
        BUILD_DIR="${CMAKE_USE_DIR}";
    else
        : ${BUILD_DIR:=${CMAKE_USE_DIR}_build};
    fi;
    einfo "Source directory (CMAKE_USE_DIR): \"${CMAKE_USE_DIR}\"";
    einfo "Build directory  (BUILD_DIR):     \"${BUILD_DIR}\"";
    mkdir -p "${BUILD_DIR}" || die
}
_cmake_modify-cmakelists () 
{ 
    debug-print-function ${FUNCNAME} "$@";
    grep -qs "<<< Gentoo configuration >>>" "${CMAKE_USE_DIR}"/CMakeLists.txt && return 0;
    find "${CMAKE_USE_DIR}" -name CMakeLists.txt -exec sed -e '/^[[:space:]]*set[[:space:]]*([[:space:]]*CMAKE_BUILD_TYPE\([[:space:]].*)\|)\)/I{s/^/#_cmake_modify_IGNORE /g}' -e '/^[[:space:]]*set[[:space:]]*([[:space:]]*CMAKE_COLOR_MAKEFILE[[:space:]].*)/I{s/^/#_cmake_modify_IGNORE /g}' -e '/^[[:space:]]*set[[:space:]]*([[:space:]]*CMAKE_INSTALL_PREFIX[[:space:]].*)/I{s/^/#_cmake_modify_IGNORE /g}' -e '/^[[:space:]]*set[[:space:]]*([[:space:]]*CMAKE_VERBOSE_MAKEFILE[[:space:]].*)/I{s/^/#_cmake_modify_IGNORE /g}' -i {} + || die "${LINENO}: failed to disable hardcoded settings";
    local x;
    for x in $(find "${CMAKE_USE_DIR}" -name CMakeLists.txt -exec grep -l "^#_cmake_modify_IGNORE" {} +;);
    do
        einfo "Hardcoded definition(s) removed in $(echo "${x}" | cut -c $((${#CMAKE_USE_DIR}+2))-):";
        einfo "$(grep -se '^#_cmake_modify_IGNORE' ${x} | cut -c 22-99)";
    done;
    cat >> "${CMAKE_USE_DIR}"/CMakeLists.txt <<-_EOF_ || 

message(STATUS "<<< Gentoo configuration >>>
Build type      \${CMAKE_BUILD_TYPE}
Install path    \${CMAKE_INSTALL_PREFIX}
Compiler flags:
C               \${CMAKE_C_FLAGS}
C++             \${CMAKE_CXX_FLAGS}
Linker flags:
Executable      \${CMAKE_EXE_LINKER_FLAGS}
Module          \${CMAKE_MODULE_LINKER_FLAGS}
Shared          \${CMAKE_SHARED_LINKER_FLAGS}\n")
_EOF_
 die
}
_dosym8_canonicalize () 
{ 
    local path slash i prev out IFS=/;
    path=($1);
    [[ $1 == /* ]] && slash=/;
    while true; do
        prev=;
        for i in ${!path[@]};
        do
            if [[ -z ${path[i]} || ${path[i]} == . ]]; then
                unset "path[i]";
            else
                if [[ ${path[i]} != .. ]]; then
                    prev=${i};
                else
                    if [[ -n ${prev} || -n ${slash} ]]; then
                        [[ -n ${prev} ]] && unset "path[prev]";
                        unset "path[i]";
                        continue 2;
                    fi;
                fi;
            fi;
        done;
        break;
    done;
    out="${slash}${path[*]}";
    echo "${out:-.}"
}
_eapply_get_files () 
{ 
    local LC_ALL=POSIX;
    local prev_shopt=$(shopt -p nullglob);
    shopt -s nullglob;
    local f;
    for f in "${1}"/*;
    do
        if [[ ${f} == *.diff || ${f} == *.patch ]]; then
            files+=("${f}");
        fi;
    done;
    ${prev_shopt}
}
_eapply_patch () 
{ 
    local f=${1};
    local prefix=${2};
    ebegin "${prefix:-Applying }${f##*/}";
    local all_opts=(-p1 -f -g0 --no-backup-if-mismatch "${patch_options[@]}");
    if ${patch_cmd} "${all_opts[@]}" --dry-run -s -F0 < "${f}" &> /dev/null; then
        all_opts+=(-s -F0);
    fi;
    ${patch_cmd} "${all_opts[@]}" < "${f}";
    failed=${?};
    if ! eend "${failed}"; then
        __helpers_die "patch -p1 ${patch_options[*]} failed with ${f}";
    fi
}
_filter-hardened () 
{ 
    local f;
    for f in "$@";
    do
        case "${f}" in 
            -fPIC | -fpic | -fPIE | -fpie | -Wl,pie | -pie)
                gcc-specs-pie || continue;
                if ! is-flagq -nopie && ! is-flagq -no-pie; then
                    if test-flags -nopie > /dev/null; then
                        append-flags -nopie;
                    else
                        append-flags -no-pie;
                    fi;
                fi
            ;;
            -fstack-protector)
                gcc-specs-ssp || continue;
                is-flagq -fno-stack-protector || append-flags $(test-flags -fno-stack-protector)
            ;;
            -fstack-protector-all)
                gcc-specs-ssp-to-all || continue;
                is-flagq -fno-stack-protector-all || append-flags $(test-flags -fno-stack-protector-all)
            ;;
            -fno-strict-overflow)
                gcc-specs-nostrict || continue;
                is-flagq -fstrict-overflow || append-flags $(test-flags -fstrict-overflow)
            ;;
        esac;
    done
}
_filter-var () 
{ 
    local f x var=$1 new=();
    shift;
    for f in ${!var};
    do
        for x in "$@";
        do
            [[ ${f} == ${x} ]] && continue 2;
        done;
        new+=("${f}");
    done;
    export ${var}="${new[*]}"
}
_gcc-install-dir () 
{ 
    echo "$(LC_ALL=C $(tc-getCC) -print-search-dirs 2> /dev/null |		awk '$1=="install:" {print $2}')"
}
_gcc-specs-directive_raw () 
{ 
    local cc=$(tc-getCC);
    local specfiles=$(LC_ALL=C ${cc} -v 2>&1 | awk '$1=="Reading" {print $NF}');
    ${cc} -dumpspecs 2> /dev/null | cat - ${specfiles} | awk -v directive=$1 'BEGIN	{ pspec=""; spec=""; outside=1 }
$1=="*"directive":"  { pspec=spec; spec=""; outside=0; next }
	outside || NF==0 || ( substr($1,1,1)=="*" && substr($1,length($1),1)==":" ) { outside=1; next }
	spec=="" && substr($0,1,1)=="+" { spec=pspec " " substr($0,2); next }
	{ spec=spec $0 }
END	{ print spec }';
    return 0
}
_gcc-specs-exists () 
{ 
    [[ -f $(_gcc-install-dir)/$1 ]]
}
_gcc_fullversion () 
{ 
    local ver="$1";
    shift;
    set -- $($(tc-getCPP "$@") -E -P - <<<"__GNUC__ __GNUC_MINOR__ __GNUC_PATCHLEVEL__");
    eval echo "$ver"
}
_is_flagq () 
{ 
    local x var="$1[*]";
    for x in ${!var};
    do
        [[ ${x} == $2 ]] && return 0;
    done;
    return 1
}
_multilib_multibuild_wrapper () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local ABI=${MULTIBUILD_VARIANT#*.};
    local -r MULTILIB_ABI_FLAG=${MULTIBUILD_VARIANT%.*};
    multilib_toolchain_setup "${ABI}";
    readonly ABI;
    "${@}"
}
_pax_list_files () 
{ 
    local f cmd;
    cmd=$1;
    shift;
    for f in "$@";
    do
        ${cmd} "     ${f}";
    done
}
_python_check_EPYTHON () 
{ 
    if [[ -z ${EPYTHON} ]]; then
        die "EPYTHON unset, invalid call context";
    fi
}
_python_check_locale_sanity () 
{ 
    local -x LC_ALL=${1};
    local IFS=;
    local lc=({a..z});
    local uc=({A..Z});
    local input="${lc[*]}${uc[*]}";
    local output=$(tr '[:lower:][:upper:]' '[:upper:][:lower:]' <<<"${input}");
    [[ ${output} == "${uc[*]}${lc[*]}" ]]
}
_python_export () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local impl var;
    case "${1}" in 
        python* | jython*)
            impl=${1/_/.};
            shift
        ;;
        pypy | pypy3)
            impl=${1};
            shift
        ;;
        *)
            impl=${EPYTHON};
            if [[ -z ${impl} ]]; then
                die "_python_export called without a python implementation and EPYTHON is unset";
            fi
        ;;
    esac;
    debug-print "${FUNCNAME}: implementation: ${impl}";
    for var in "$@";
    do
        case "${var}" in 
            EPYTHON)
                export EPYTHON=${impl};
                debug-print "${FUNCNAME}: EPYTHON = ${EPYTHON}"
            ;;
            PYTHON)
                export PYTHON=${EPREFIX}/usr/bin/${impl};
                debug-print "${FUNCNAME}: PYTHON = ${PYTHON}"
            ;;
            PYTHON_SITEDIR)
                [[ -n ${PYTHON} ]] || die "PYTHON needs to be set for ${var} to be exported, or requested before it";
                PYTHON_SITEDIR=$(
					"${PYTHON}" - <<-EOF || die
						import sysconfig
						print(sysconfig.get_path("purelib"))
					EOF
				);
                export PYTHON_SITEDIR;
                debug-print "${FUNCNAME}: PYTHON_SITEDIR = ${PYTHON_SITEDIR}"
            ;;
            PYTHON_INCLUDEDIR)
                [[ -n ${PYTHON} ]] || die "PYTHON needs to be set for ${var} to be exported, or requested before it";
                PYTHON_INCLUDEDIR=$(
					"${PYTHON}" - <<-EOF || die
						import sysconfig
						print(sysconfig.get_path("platinclude"))
					EOF
				);
                export PYTHON_INCLUDEDIR;
                debug-print "${FUNCNAME}: PYTHON_INCLUDEDIR = ${PYTHON_INCLUDEDIR}";
                if [[ ! -d ${PYTHON_INCLUDEDIR} ]]; then
                    die "${impl} does not install any header files!";
                fi
            ;;
            PYTHON_LIBPATH)
                [[ -n ${PYTHON} ]] || die "PYTHON needs to be set for ${var} to be exported, or requested before it";
                PYTHON_LIBPATH=$(
					"${PYTHON}" - <<-EOF || die
						import os.path, sysconfig
						print(
							os.path.join(
								sysconfig.get_config_var("LIBDIR"),
								sysconfig.get_config_var("LDLIBRARY"))
							if sysconfig.get_config_var("LDLIBRARY")
							else "")
					EOF
				);
                export PYTHON_LIBPATH;
                debug-print "${FUNCNAME}: PYTHON_LIBPATH = ${PYTHON_LIBPATH}";
                if [[ ! -n ${PYTHON_LIBPATH} ]]; then
                    die "${impl} lacks a (usable) dynamic library";
                fi
            ;;
            PYTHON_CFLAGS)
                local val;
                case "${impl}" in 
                    python*)
                        val=$($(tc-getPKG_CONFIG) --cflags ${impl/n/n-}) || die
                    ;;
                    *)
                        die "${impl}: obtaining ${var} not supported"
                    ;;
                esac;
                export PYTHON_CFLAGS=${val};
                debug-print "${FUNCNAME}: PYTHON_CFLAGS = ${PYTHON_CFLAGS}"
            ;;
            PYTHON_LIBS)
                local val;
                case "${impl}" in 
                    python2* | python3.6 | python3.7*)
                        val=$($(tc-getPKG_CONFIG) --libs ${impl/n/n-}) || die
                    ;;
                    python*)
                        val=$($(tc-getPKG_CONFIG) --libs ${impl/n/n-}-embed) || die
                    ;;
                    *)
                        die "${impl}: obtaining ${var} not supported"
                    ;;
                esac;
                export PYTHON_LIBS=${val};
                debug-print "${FUNCNAME}: PYTHON_LIBS = ${PYTHON_LIBS}"
            ;;
            PYTHON_CONFIG)
                local flags val;
                case "${impl}" in 
                    python*)
                        [[ -n ${PYTHON} ]] || die "PYTHON needs to be set for ${var} to be exported, or requested before it";
                        flags=$(
							"${PYTHON}" - <<-EOF || die
								import sysconfig
								print(sysconfig.get_config_var("ABIFLAGS")
									or "")
							EOF
						);
                        val=${PYTHON}${flags}-config
                    ;;
                    *)
                        die "${impl}: obtaining ${var} not supported"
                    ;;
                esac;
                export PYTHON_CONFIG=${val};
                debug-print "${FUNCNAME}: PYTHON_CONFIG = ${PYTHON_CONFIG}"
            ;;
            PYTHON_PKG_DEP)
                local d;
                case ${impl} in 
                    python2.7)
                        PYTHON_PKG_DEP='>=dev-lang/python-2.7.5-r2:2.7'
                    ;;
                    python3.8)
                        PYTHON_PKG_DEP=">=dev-lang/python-3.8.12_p1-r1:3.8"
                    ;;
                    python3.9)
                        PYTHON_PKG_DEP=">=dev-lang/python-3.9.9-r1:3.9"
                    ;;
                    python3.10)
                        PYTHON_PKG_DEP=">=dev-lang/python-3.10.0_p1-r1:3.10"
                    ;;
                    python*)
                        PYTHON_PKG_DEP="dev-lang/python:${impl#python}"
                    ;;
                    pypy)
                        PYTHON_PKG_DEP='>=dev-python/pypy-7.3.0:0='
                    ;;
                    pypy3)
                        PYTHON_PKG_DEP='>=dev-python/pypy3-7.3.7-r1:0='
                    ;;
                    *)
                        die "Invalid implementation: ${impl}"
                    ;;
                esac;
                if [[ -n ${PYTHON_REQ_USE} ]]; then
                    PYTHON_PKG_DEP+=[${PYTHON_REQ_USE}];
                fi;
                export PYTHON_PKG_DEP;
                debug-print "${FUNCNAME}: PYTHON_PKG_DEP = ${PYTHON_PKG_DEP}"
            ;;
            PYTHON_SCRIPTDIR)
                local dir;
                export PYTHON_SCRIPTDIR=${EPREFIX}/usr/lib/python-exec/${impl};
                debug-print "${FUNCNAME}: PYTHON_SCRIPTDIR = ${PYTHON_SCRIPTDIR}"
            ;;
            *)
                die "_python_export: unknown variable ${var}"
            ;;
        esac;
    done
}
_python_impl_matches () 
{ 
    [[ ${#} -ge 1 ]] || die "${FUNCNAME}: takes at least 1 parameter";
    [[ ${#} -eq 1 ]] && return 0;
    local impl=${1/./_} pattern;
    shift;
    for pattern in "$@";
    do
        case ${pattern} in 
            -2 | python2* | pypy)
                if [[ ${EAPI} != [67] ]]; then
                    eerror;
                    eerror "Python 2 is no longer supported in Gentoo, please remove Python 2";
                    eerror "${FUNCNAME[1]} calls.";
                    die "Passing ${pattern} to ${FUNCNAME[1]} is banned in EAPI ${EAPI}";
                fi
            ;;
            -3)
                if [[ ${EAPI} != [67] ]]; then
                    eerror;
                    eerror "Python 2 is no longer supported in Gentoo, please remove Python 2";
                    eerror "${FUNCNAME[1]} calls.";
                    die "Passing ${pattern} to ${FUNCNAME[1]} is banned in EAPI ${EAPI}";
                fi;
                return 0
            ;;
            3.9)
                [[ ${impl} == python${pattern/./_} || ${impl} == pypy3 ]] && return 0
            ;;
            3.8 | 3.10)
                [[ ${impl} == python${pattern/./_} ]] && return 0
            ;;
            *)
                [[ ${impl} == ${pattern/./_} ]] && return 0
            ;;
        esac;
    done;
    return 1
}
_python_run_check_deps () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local impl=${1};
    local hasv_args=(-b);
    [[ ${EAPI} == 6 ]] && hasv_args=(--host-root);
    einfo "Checking whether ${impl} is suitable ...";
    local PYTHON_PKG_DEP;
    _python_export "${impl}" PYTHON_PKG_DEP;
    ebegin "  ${PYTHON_PKG_DEP}";
    has_version "${hasv_args[@]}" "${PYTHON_PKG_DEP}";
    eend ${?} || return 1;
    declare -f python_check_deps > /dev/null || return 0;
    local PYTHON_USEDEP="python_targets_${impl}(-)";
    local PYTHON_SINGLE_USEDEP="python_single_target_${impl}(-)";
    ebegin "  python_check_deps";
    python_check_deps;
    eend ${?}
}
_python_set_impls () 
{ 
    local i;
    if ! declare -p PYTHON_COMPAT &> /dev/null; then
        die 'PYTHON_COMPAT not declared.';
    fi;
    if [[ $(declare -p PYTHON_COMPAT) != "declare -a"* ]]; then
        die 'PYTHON_COMPAT must be an array.';
    fi;
    local obsolete=();
    if [[ ! -n ${PYTHON_COMPAT_NO_STRICT} ]]; then
        for i in "${PYTHON_COMPAT[@]}";
        do
            case ${i} in 
                pypy3 | python2_7 | python3_[89] | python3_10)

                ;;
                jython2_7 | pypy | pypy1_[89] | pypy2_0 | python2_[5-6] | python3_[1-7])
                    obsolete+=("${i}")
                ;;
                *)
                    if has "${i}" "${_PYTHON_ALL_IMPLS[@]}" "${_PYTHON_HISTORICAL_IMPLS[@]}"; then
                        die "Mis-synced patterns in _python_set_impls: missing ${i}";
                    else
                        die "Invalid implementation in PYTHON_COMPAT: ${i}";
                    fi
                ;;
            esac;
        done;
    fi;
    if [[ -n ${obsolete[@]} && ${EBUILD_PHASE} == setup ]]; then
        if [[ $(head -n 1 "${EBUILD}" 2>/dev/null) == *2022* ]]; then
            eqawarn "Please clean PYTHON_COMPAT of obsolete implementations:";
            eqawarn "  ${obsolete[*]}";
        fi;
    fi;
    local supp=() unsupp=();
    for i in "${_PYTHON_ALL_IMPLS[@]}";
    do
        if has "${i}" "${PYTHON_COMPAT[@]}"; then
            supp+=("${i}");
        else
            unsupp+=("${i}");
        fi;
    done;
    if [[ ! -n ${supp[@]} ]]; then
        if [[ -n ${_PYTHON_ALLOW_PY27} ]] && has python2_7 "${PYTHON_COMPAT[@]}"; then
            supp+=(python2_7);
        else
            die "No supported implementation in PYTHON_COMPAT.";
        fi;
    fi;
    if [[ -n ${_PYTHON_SUPPORTED_IMPLS[@]} ]]; then
        if [[ ${_PYTHON_SUPPORTED_IMPLS[@]} != ${supp[@]} ]]; then
            eerror "Supported impls (PYTHON_COMPAT) changed between inherits!";
            eerror "Before: ${_PYTHON_SUPPORTED_IMPLS[*]}";
            eerror "Now   : ${supp[*]}";
            die "_PYTHON_SUPPORTED_IMPLS integrity check failed";
        fi;
        if [[ ${_PYTHON_UNSUPPORTED_IMPLS[@]} != ${unsupp[@]} ]]; then
            eerror "Unsupported impls changed between inherits!";
            eerror "Before: ${_PYTHON_UNSUPPORTED_IMPLS[*]}";
            eerror "Now   : ${unsupp[*]}";
            die "_PYTHON_UNSUPPORTED_IMPLS integrity check failed";
        fi;
    else
        _PYTHON_SUPPORTED_IMPLS=("${supp[@]}");
        _PYTHON_UNSUPPORTED_IMPLS=("${unsupp[@]}");
        readonly _PYTHON_SUPPORTED_IMPLS _PYTHON_UNSUPPORTED_IMPLS;
    fi
}
_python_verify_patterns () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local impl pattern;
    for pattern in "$@";
    do
        case ${pattern} in 
            -[23] | 3.[89] | 3.10)
                continue
            ;;
        esac;
        for impl in "${_PYTHON_ALL_IMPLS[@]}" "${_PYTHON_HISTORICAL_IMPLS[@]}";
        do
            [[ ${impl} == ${pattern/./_} ]] && continue 2;
        done;
        die "Invalid implementation pattern: ${pattern}";
    done
}
_python_wrapper_setup () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local workdir=${1:-${T}/${EPYTHON}};
    local impl=${2:-${EPYTHON}};
    [[ -n ${workdir} ]] || die "${FUNCNAME}: no workdir specified.";
    [[ -n ${impl} ]] || die "${FUNCNAME}: no impl nor EPYTHON specified.";
    if [[ ! -x ${workdir}/bin/python ]]; then
        mkdir -p "${workdir}"/{bin,pkgconfig} || die;
        rm -f "${workdir}"/bin/python{,2,3}{,-config} || die;
        rm -f "${workdir}"/bin/2to3 || die;
        rm -f "${workdir}"/pkgconfig/python{2,3}{,-embed}.pc || die;
        local EPYTHON PYTHON;
        _python_export "${impl}" EPYTHON PYTHON;
        local pyver pyother;
        if [[ ${EPYTHON} != python2* ]]; then
            pyver=3;
            pyother=2;
        else
            pyver=2;
            pyother=3;
        fi;
        cat > "${workdir}/bin/python" <<-_EOF_ || 
#!/bin/sh
exec "${PYTHON}" "\${@}"
_EOF_
 die
        cp "${workdir}/bin/python" "${workdir}/bin/python${pyver}" || die;
        chmod +x "${workdir}/bin/python" "${workdir}/bin/python${pyver}" || die;
        local nonsupp=("python${pyother}" "python${pyother}-config");
        if [[ ${EPYTHON} == python* ]]; then
            cat > "${workdir}/bin/python-config" <<-_EOF_ || 
#!/bin/sh
exec "${PYTHON}-config" "\${@}"
_EOF_
 die
            cp "${workdir}/bin/python-config" "${workdir}/bin/python${pyver}-config" || die;
            chmod +x "${workdir}/bin/python-config" "${workdir}/bin/python${pyver}-config" || die;
            ln -s "${PYTHON/python/2to3-}" "${workdir}"/bin/2to3 || die;
            ln -s "${EPREFIX}"/usr/$(get_libdir)/pkgconfig/${EPYTHON/n/n-}.pc "${workdir}"/pkgconfig/python${pyver}.pc || die;
            if [[ ${EPYTHON} != python[23].[67] ]]; then
                ln -s "${EPREFIX}"/usr/$(get_libdir)/pkgconfig/${EPYTHON/n/n-}-embed.pc "${workdir}"/pkgconfig/python${pyver}-embed.pc || die;
            fi;
        else
            nonsupp+=(2to3 python-config "python${pyver}-config");
        fi;
        local x;
        for x in "${nonsupp[@]}";
        do
            cat > "${workdir}"/bin/${x} <<-_EOF_ || 
#!/bin/sh
echo "${ECLASS}: ${FUNCNAME}: ${x} is not supported by ${EPYTHON} (PYTHON_COMPAT)" >&2
exit 127
_EOF_
 die
            chmod +x "${workdir}"/bin/${x} || die;
        done;
    fi;
    if [[ ${PATH##:*} != ${workdir}/bin ]]; then
        PATH=${workdir}/bin${PATH:+:${PATH}};
    fi;
    if [[ ${PKG_CONFIG_PATH##:*} != ${workdir}/pkgconfig ]]; then
        PKG_CONFIG_PATH=${workdir}/pkgconfig${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}};
    fi;
    export PATH PKG_CONFIG_PATH
}
_setup-allowed-flags () 
{ 
    ALLOWED_FLAGS=(-pipe -O '-O[12sg]' '-mcpu=*' '-march=*' '-mtune=*' '-fstack-protector*' '-fstack-check*' -fno-stack-check -fstack-clash-protection '-fcf-protection=*' -fbounds-check -fbounds-checking -fno-PIE -fno-pie -nopie -no-pie '-mindirect-branch=*' -mindirect-branch-register '-mfunction-return=*' -mretpoline -fno-unit-at-a-time -fno-strict-overflow '-fsanitize*' '-fno-sanitize*' -g '-g[0-9]' -ggdb '-ggdb[0-9]' -gdwarf '-gdwarf-*' -gstabs -gstabs+ -gz -glldb -fno-diagnostics-color '-fmessage-length=*' -fno-ident -fpermissive -frecord-gcc-switches -frecord-command-line '-fdiagnostics*' '-fplugin*' '-W*' -w '-[DUILR]*' '-Wl,*' '-fuse-ld=*');
    ALLOWED_FLAGS+=('-fno-stack-protector*' '-fabi-version=*' -fno-strict-aliasing -fno-bounds-check -fno-bounds-checking -fstrict-overflow -fno-omit-frame-pointer '-fno-builtin*');
    ALLOWED_FLAGS+=('-mregparm=*' -mno-app-regs -mapp-regs -mno-mmx -mno-sse -mno-sse2 -mno-sse3 -mno-ssse3 -mno-sse4 -mno-sse4.1 -mno-sse4.2 -mno-avx -mno-aes -mno-pclmul -mno-sse4a -mno-3dnow -mno-popcnt -mno-abm -mips1 -mips2 -mips3 -mips4 -mips32 -mips64 -mips16 -mplt -msoft-float -mno-soft-float -mhard-float -mno-hard-float '-mfpu=*' -mieee -mieee-with-inexact '-mschedule=*' -mfloat-gprs -mspe -mno-spe -mtls-direct-seg-refs -mno-tls-direct-seg-refs -mflat -mno-flat -mno-faster-structs -mfaster-structs -m32 -m64 -mx32 '-mabi=*' -mlittle-endian -mbig-endian -EL -EB -fPIC -mlive-g0 '-mcmodel=*' -mstack-bias -mno-stack-bias -msecure-plt '-m*-toc' '-mfloat-abi=*' -mfix-r4000 -mno-fix-r4000 -mfix-r4400 -mno-fix-r4400 -mfix-rm7000 -mno-fix-rm7000 -mfix-r10000 -mno-fix-r10000 '-mr10k-cache-barrier=*' -mthumb -marm -ffixed-x18 -mno-fma4 -mno-movbe -mno-xop -mno-lwp -mno-fsgsbase -mno-rdrnd -mno-f16c -mno-bmi -mno-tbm -mno-avx2 -mno-bmi2 -mno-fma -mno-lzcnt -mno-fxsr -mno-hle -mno-rtm -mno-xsave -mno-xsaveopt -mno-avx512cd -mno-avx512er -mno-avx512f -mno-avx512pf -mno-sha);
    ALLOWED_FLAGS+=(-mstackrealign)
}
_tc-getPROG () 
{ 
    local tuple=$1;
    local v var vars=$2;
    local prog=($3);
    var=${vars%% *};
    for v in ${vars};
    do
        if [[ -n ${!v} ]]; then
            export ${var}="${!v}";
            echo "${!v}";
            return 0;
        fi;
    done;
    local search=;
    [[ -n $4 ]] && search=$(type -p $4-${prog[0]});
    [[ -z ${search} && -n ${!tuple} ]] && search=$(type -p ${!tuple}-${prog[0]});
    [[ -n ${search} ]] && prog[0]=${search##*/};
    export ${var}="${prog[*]}";
    echo "${!var}"
}
_test-flag-PROG () 
{ 
    local comp=$1;
    local lang=$2;
    shift 2;
    if [[ -z ${comp} ]]; then
        return 1;
    fi;
    if [[ -z $1 ]]; then
        return 1;
    fi;
    comp=($(tc-get${comp}));
    if ! type -p ${comp[0]} > /dev/null; then
        return 1;
    fi;
    local in_src in_ext cmdline_extra=();
    case "${lang}" in 
        c)
            in_ext='c';
            in_src='int main(void) { return 0; }';
            cmdline_extra+=(-xc -c)
        ;;
        c++)
            in_ext='cc';
            in_src='int main(void) { return 0; }';
            cmdline_extra+=(-xc++ -c)
        ;;
        f77)
            in_ext='f';
            in_src='      end';
            cmdline_extra+=(-xf77 -c)
        ;;
        f95)
            in_ext='f90';
            in_src='end';
            cmdline_extra+=(-xf95 -c)
        ;;
        c+ld)
            in_ext='c';
            in_src='int main(void) { return 0; }';
            cmdline_extra+=(-xc)
        ;;
    esac;
    local test_in=${T}/test-flag.${in_ext};
    local test_out=${T}/test-flag.exe;
    printf "%s\n" "${in_src}" > "${test_in}" || die "Failed to create '${test_in}'";
    local cmdline=("${comp[@]}" -Werror "$@" "${cmdline_extra[@]}" "${test_in}" -o "${test_out}");
    if ! "${cmdline[@]}" &> /dev/null; then
        cmdline+=(-Qunused-arguments);
        "${cmdline[@]}" &> /dev/null;
    fi
}
_test-flags-PROG () 
{ 
    local comp=$1;
    local flags=();
    local x;
    shift;
    [[ -z ${comp} ]] && return 1;
    while (( $# )); do
        case "$1" in 
            --param | -B)
                if test-flag-${comp} "$1" "$2"; then
                    flags+=("$1" "$2");
                fi;
                shift 2
            ;;
            *)
                if test-flag-${comp} "$1"; then
                    flags+=("$1");
                fi;
                shift 1
            ;;
        esac;
    done;
    echo "${flags[*]}";
    [[ ${#flags[@]} -gt 0 ]]
}
all-flag-vars () 
{ 
    echo {ADA,C,CPP,CXX,CCAS,F,FC,LD}FLAGS
}
append-cflags () 
{ 
    [[ $# -eq 0 ]] && return 0;
    export CFLAGS+=" $*";
    return 0
}
append-cppflags () 
{ 
    [[ $# -eq 0 ]] && return 0;
    export CPPFLAGS+=" $*";
    return 0
}
append-cxxflags () 
{ 
    [[ $# -eq 0 ]] && return 0;
    export CXXFLAGS+=" $*";
    return 0
}
append-fflags () 
{ 
    [[ $# -eq 0 ]] && return 0;
    export FFLAGS+=" $*";
    export FCFLAGS+=" $*";
    return 0
}
append-flags () 
{ 
    [[ $# -eq 0 ]] && return 0;
    case " $* " in 
        *' '-[DIU]*)
            eqawarn 'please use append-cppflags for preprocessor flags'
        ;;
        *' '-L* | *' '-Wl,*)
            eqawarn 'please use append-ldflags for linker flags'
        ;;
    esac;
    append-cflags "$@";
    append-cxxflags "$@";
    append-fflags "$@";
    return 0
}
append-ldflags () 
{ 
    [[ $# -eq 0 ]] && return 0;
    local flag;
    for flag in "$@";
    do
        [[ ${flag} == -l* ]] && eqawarn "Appending a library link instruction (${flag}); libraries to link to should not be passed through LDFLAGS";
    done;
    export LDFLAGS="${LDFLAGS} $*";
    return 0
}
append-lfs-flags () 
{ 
    [[ $# -ne 0 ]] && die "append-lfs-flags takes no arguments";
    append-cppflags -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE
}
append-libs () 
{ 
    [[ $# -eq 0 ]] && return 0;
    local flag;
    for flag in "$@";
    do
        if [[ -z "${flag// }" ]]; then
            eqawarn "Appending an empty argument to LIBS is invalid! Skipping.";
            continue;
        fi;
        case $flag in 
            -[lL]*)
                export LIBS="${LIBS} ${flag}"
            ;;
            -*)
                eqawarn "Appending non-library to LIBS (${flag}); Other linker flags should be passed via LDFLAGS";
                export LIBS="${LIBS} ${flag}"
            ;;
            *)
                export LIBS="${LIBS} -l${flag}"
            ;;
        esac;
    done;
    return 0
}
build_sphinx () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    [[ ${#} -eq 1 ]] || die "${FUNCNAME} takes 1 arg: <directory>";
    local dir=${1};
    sed -i -e 's:^intersphinx_mapping:disabled_&:' "${dir}"/conf.py || die;
    local command=("${EPYTHON}" -m sphinx.cmd.build);
    if ! "${EPYTHON}" -c "import sphinx.cmd.build" 2> /dev/null; then
        command=(sphinx-build);
    fi;
    command+=(-b html -d "${dir}"/_build/doctrees "${dir}" "${dir}"/_build/html);
    echo "${command[@]}" 1>&2;
    "${command[@]}" || die;
    HTML_DOCS+=("${dir}/_build/html/.")
}
check_distribution_components () 
{ 
    if [[ ${CMAKE_MAKEFILE_GENERATOR} == ninja ]]; then
        local all_targets=() my_targets=() l;
        cd "${BUILD_DIR}" || die;
        while read -r l; do
            if [[ ${l} == install-*-stripped:* ]]; then
                l=${l#install-};
                l=${l%%-stripped*};
                case ${l} in 
                    LLVM | LLVMgold)

                    ;;
                    LLVMDemangle | LLVMSupport | LLVMTableGen)

                    ;;
                    LLVM*)
                        continue
                    ;;
                    distribution | llvm-libraries)
                        continue
                    ;;
                    docs-llvm-html)
                        use doc || continue
                    ;;
                esac;
                all_targets+=("${l}");
            fi;
        done < <(ninja -t targets all);
        while read -r l; do
            my_targets+=("${l}");
        done < <(get_distribution_components "\n");
        local add=() remove=();
        for l in "${all_targets[@]}";
        do
            if ! has "${l}" "${my_targets[@]}"; then
                add+=("${l}");
            fi;
        done;
        for l in "${my_targets[@]}";
        do
            if ! has "${l}" "${all_targets[@]}"; then
                remove+=("${l}");
            fi;
        done;
        if [[ ${#add[@]} -gt 0 || ${#remove[@]} -gt 0 ]]; then
            eqawarn "get_distribution_components() is outdated!";
            eqawarn "   Add: ${add[*]}";
            eqawarn "Remove: ${remove[*]}";
        fi;
        cd - > /dev/null || die;
    fi
}
check_live_ebuild () 
{ 
    local prod_targets=($(sed -n -e '/set(LLVM_ALL_TARGETS/,/)/p' CMakeLists.txt 			| tail -n +2 | head -n -1));
    local all_targets=(lib/Target/*/);
    all_targets=("${all_targets[@]#lib/Target/}");
    all_targets=("${all_targets[@]%/}");
    local exp_targets=() i;
    for i in "${all_targets[@]}";
    do
        has "${i}" "${prod_targets[@]}" || exp_targets+=("${i}");
    done;
    if [[ ${exp_targets[*]} != ${ALL_LLVM_EXPERIMENTAL_TARGETS[*]} ]]; then
        eqawarn "ALL_LLVM_EXPERIMENTAL_TARGETS is outdated!";
        eqawarn "    Have: ${ALL_LLVM_EXPERIMENTAL_TARGETS[*]}";
        eqawarn "Expected: ${exp_targets[*]}";
        eqawarn;
    fi;
    if [[ ${prod_targets[*]} != ${ALL_LLVM_PRODUCTION_TARGETS[*]} ]]; then
        eqawarn "ALL_LLVM_PRODUCTION_TARGETS is outdated!";
        eqawarn "    Have: ${ALL_LLVM_PRODUCTION_TARGETS[*]}";
        eqawarn "Expected: ${prod_targets[*]}";
    fi
}
clang-fullversion () 
{ 
    _clang_fullversion '$1.$2.$3' "$@"
}
clang-major-version () 
{ 
    _clang_fullversion '$1' "$@"
}
clang-micro-version () 
{ 
    _clang_fullversion '$3' "$@"
}
clang-minor-version () 
{ 
    _clang_fullversion '$2' "$@"
}
clang-version () 
{ 
    _clang_fullversion '$1.$2' "$@"
}
cmake-utils_src_make () 
{ 
    die "cmake-utils_src_make is banned. Use cmake_build instead"
}
cmake-utils_use () 
{ 
    _cmake_banned_func "" "$@"
}
cmake-utils_use_build () 
{ 
    _cmake_banned_func BUILD_ "$@"
}
cmake-utils_use_disable () 
{ 
    _cmake_banned_func DISABLE_ "$@"
}
cmake-utils_use_enable () 
{ 
    _cmake_banned_func ENABLE_ "$@"
}
cmake-utils_use_has () 
{ 
    _cmake_banned_func HAVE_ "$@"
}
cmake-utils_use_no () 
{ 
    _cmake_banned_func NO_ "$@"
}
cmake-utils_use_use () 
{ 
    _cmake_banned_func USE_ "$@"
}
cmake-utils_use_want () 
{ 
    _cmake_banned_func WANT_ "$@"
}
cmake-utils_use_with () 
{ 
    _cmake_banned_func WITH_ "$@"
}
cmake-utils_useno () 
{ 
    _cmake_banned_func "" "$@"
}
cmake_build () 
{ 
    debug-print-function ${FUNCNAME} "$@";
    _cmake_check_build_dir;
    pushd "${BUILD_DIR}" > /dev/null || die;
    case ${CMAKE_MAKEFILE_GENERATOR} in 
        emake)
            [[ -e Makefile ]] || die "Makefile not found. Error during configure stage.";
            case ${CMAKE_VERBOSE} in 
                OFF)
                    emake "$@"
                ;;
                *)
                    emake VERBOSE=1 "$@"
                ;;
            esac
        ;;
        ninja)
            [[ -e build.ninja ]] || die "build.ninja not found. Error during configure stage.";
            eninja "$@"
        ;;
    esac;
    popd > /dev/null || die
}
cmake_comment_add_subdirectory () 
{ 
    if [[ -z ${1} ]]; then
        die "${FUNCNAME[0]} must be passed at least one directory name to comment";
    fi;
    [[ -e "CMakeLists.txt" ]] || return;
    local d;
    for d in $@;
    do
        d=${d//\//\\/};
        sed -e "/add_subdirectory[[:space:]]*([[:space:]]*${d}[[:space:]]*)/I s/^/#DONOTCOMPILE /" -i CMakeLists.txt || die "failed to comment add_subdirectory(${d})";
    done
}
cmake_run_in () 
{ 
    if [[ -z ${2} ]]; then
        die "${FUNCNAME[0]} must be passed at least two arguments";
    fi;
    [[ -e ${1} ]] || die "${FUNCNAME[0]}: Nonexistent path: ${1}";
    pushd ${1} > /dev/null || die;
    "${@:2}";
    popd > /dev/null || die
}
cmake_src_compile () 
{ 
    debug-print-function ${FUNCNAME} "$@";
    cmake_build "$@"
}
cmake_src_configure () 
{ 
    debug-print-function ${FUNCNAME} "$@";
    [[ -n ${_CMAKE_SRC_PREPARE_HAS_RUN} ]] || die "FATAL: cmake_src_prepare has not been run";
    _cmake_check_build_dir;
    xdg_environment_reset;
    local build_rules=${BUILD_DIR}/gentoo_rules.cmake;
    cat > "${build_rules}" <<-_EOF_ || 
set(CMAKE_ASM_COMPILE_OBJECT "<CMAKE_ASM_COMPILER> <DEFINES> <INCLUDES> ${CPPFLAGS} <FLAGS> -o <OBJECT> -c <SOURCE>" CACHE STRING "ASM compile command" FORCE)
set(CMAKE_ASM-ATT_COMPILE_OBJECT "<CMAKE_ASM-ATT_COMPILER> <DEFINES> <INCLUDES> ${CPPFLAGS} <FLAGS> -o <OBJECT> -c -x assembler <SOURCE>" CACHE STRING "ASM-ATT compile command" FORCE)
set(CMAKE_ASM-ATT_LINK_FLAGS "-nostdlib" CACHE STRING "ASM-ATT link flags" FORCE)
set(CMAKE_C_COMPILE_OBJECT "<CMAKE_C_COMPILER> <DEFINES> <INCLUDES> ${CPPFLAGS} <FLAGS> -o <OBJECT> -c <SOURCE>" CACHE STRING "C compile command" FORCE)
set(CMAKE_CXX_COMPILE_OBJECT "<CMAKE_CXX_COMPILER> <DEFINES> <INCLUDES> ${CPPFLAGS} <FLAGS> -o <OBJECT> -c <SOURCE>" CACHE STRING "C++ compile command" FORCE)
set(CMAKE_Fortran_COMPILE_OBJECT "<CMAKE_Fortran_COMPILER> <DEFINES> <INCLUDES> ${FCFLAGS} <FLAGS> -o <OBJECT> -c <SOURCE>" CACHE STRING "Fortran compile command" FORCE)
_EOF_
 die
    local myCC=$(tc-getCC) myCXX=$(tc-getCXX) myFC=$(tc-getFC);
    local toolchain_file=${BUILD_DIR}/gentoo_toolchain.cmake;
    cat > ${toolchain_file} <<-_EOF_ || 
set(CMAKE_ASM_COMPILER "${myCC/ /;}")
set(CMAKE_ASM-ATT_COMPILER "${myCC/ /;}")
set(CMAKE_C_COMPILER "${myCC/ /;}")
set(CMAKE_CXX_COMPILER "${myCXX/ /;}")
set(CMAKE_Fortran_COMPILER "${myFC/ /;}")
set(CMAKE_AR $(type -P $(tc-getAR)) CACHE FILEPATH "Archive manager" FORCE)
set(CMAKE_RANLIB $(type -P $(tc-getRANLIB)) CACHE FILEPATH "Archive index generator" FORCE)
set(CMAKE_SYSTEM_PROCESSOR "${CHOST%%-*}")
_EOF_
 die
    local -x ASMFLAGS=${CFLAGS};
    local -x PKG_CONFIG=$(tc-getPKG_CONFIG);
    if tc-is-cross-compiler; then
        local sysname;
        case "${KERNEL:-linux}" in 
            Cygwin)
                sysname="CYGWIN_NT-5.1"
            ;;
            HPUX)
                sysname="HP-UX"
            ;;
            linux)
                sysname="Linux"
            ;;
            Winnt)
                sysname="Windows";
                cat >> "${toolchain_file}" <<-_EOF_ || 
set(CMAKE_RC_COMPILER $(tc-getRC))
_EOF_
 die
            ;;
            *)
                sysname="${KERNEL}"
            ;;
        esac
        cat >> "${toolchain_file}" <<-_EOF_ || 
set(CMAKE_SYSTEM_NAME "${sysname}")
_EOF_
 die
        if [ "${SYSROOT:-/}" != "/" ]; then
            cat >> "${toolchain_file}" <<-_EOF_ || 
set(CMAKE_FIND_ROOT_PATH "${SYSROOT}")
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
_EOF_
 die;
        fi;
    fi
    if use prefix-guest; then
        cat >> "${build_rules}" <<-_EOF_ || 
# in Prefix we need rpath and must ensure cmake gets our default linker path
# right ... except for Darwin hosts
if(NOT APPLE)
set(CMAKE_SKIP_RPATH OFF CACHE BOOL "" FORCE)
set(CMAKE_PLATFORM_REQUIRED_RUNTIME_PATH "${EPREFIX}/usr/${CHOST}/lib/gcc;${EPREFIX}/usr/${CHOST}/lib;${EPREFIX}/usr/$(get_libdir);${EPREFIX}/$(get_libdir)" CACHE STRING "" FORCE)
else()
set(CMAKE_PREFIX_PATH "${EPREFIX}/usr" CACHE STRING "" FORCE)
set(CMAKE_MACOSX_RPATH ON CACHE BOOL "" FORCE)
set(CMAKE_SKIP_BUILD_RPATH OFF CACHE BOOL "" FORCE)
set(CMAKE_SKIP_RPATH OFF CACHE BOOL "" FORCE)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE CACHE BOOL "" FORCE)
endif()
_EOF_
 die;
    fi
    local common_config=${BUILD_DIR}/gentoo_common_config.cmake;
    local libdir=$(get_libdir);
    cat > "${common_config}" <<-_EOF_ || 
set(CMAKE_GENTOO_BUILD ON CACHE BOOL "Indicate Gentoo package build")
set(LIB_SUFFIX ${libdir/lib} CACHE STRING "library path suffix" FORCE)
set(CMAKE_INSTALL_LIBDIR ${libdir} CACHE PATH "Output directory for libraries")
set(CMAKE_INSTALL_INFODIR "${EPREFIX}/usr/share/info" CACHE PATH "")
set(CMAKE_INSTALL_MANDIR "${EPREFIX}/usr/share/man" CACHE PATH "")
set(CMAKE_USER_MAKE_RULES_OVERRIDE "${build_rules}" CACHE FILEPATH "Gentoo override rules")
set(CMAKE_INSTALL_DOCDIR "${EPREFIX}/usr/share/doc/${PF}" CACHE PATH "")
set(BUILD_SHARED_LIBS ON CACHE BOOL "")
_EOF_
 die
    if [[ -n ${_ECM_ECLASS} ]]; then
        echo 'set(ECM_DISABLE_QMLPLUGINDUMP ON CACHE BOOL "")' >> "${common_config}" || die;
    fi;
    if [[ "${ARCH}" == riscv ]]; then
        echo 'set(CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX '"${libdir#lib}"' CACHE STRING "library search suffix" FORCE)' >> "${common_config}" || die;
    fi;
    if [[ "${NOCOLOR}" = true || "${NOCOLOR}" = yes ]]; then
        echo 'set(CMAKE_COLOR_MAKEFILE OFF CACHE BOOL "pretty colors during make" FORCE)' >> "${common_config}" || die;
    fi;
    if [[ ${EAPI} != 7 ]]; then
        echo 'set(CMAKE_INSTALL_ALWAYS 1)' >> "${common_config}" || die;
    fi;
    if [[ ${CMAKE_BUILD_TYPE} != Gentoo ]]; then
        cat >> ${common_config} <<-_EOF_ || 
set(CMAKE_ASM_FLAGS_${CMAKE_BUILD_TYPE^^} "" CACHE STRING "")
set(CMAKE_ASM-ATT_FLAGS_${CMAKE_BUILD_TYPE^^} "" CACHE STRING "")
set(CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE^^} "" CACHE STRING "")
set(CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE^^} "" CACHE STRING "")
set(CMAKE_Fortran_FLAGS_${CMAKE_BUILD_TYPE^^} "" CACHE STRING "")
set(CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE^^} "" CACHE STRING "")
set(CMAKE_MODULE_LINKER_FLAGS_${CMAKE_BUILD_TYPE^^} "" CACHE STRING "")
set(CMAKE_SHARED_LINKER_FLAGS_${CMAKE_BUILD_TYPE^^} "" CACHE STRING "")
set(CMAKE_STATIC_LINKER_FLAGS_${CMAKE_BUILD_TYPE^^} "" CACHE STRING "")
_EOF_
 die;
    fi
    [[ -z ${mycmakeargs} ]] && declare -a mycmakeargs=();
    local mycmakeargstype=$(declare -p mycmakeargs 2>&-);
    if [[ "${mycmakeargstype}" != "declare -a mycmakeargs="* ]]; then
        die "mycmakeargs must be declared as array";
    fi;
    local mycmakeargs_local=("${mycmakeargs[@]}");
    local warn_unused_cli="";
    if [[ ${CMAKE_WARN_UNUSED_CLI} == no ]]; then
        warn_unused_cli="--no-warn-unused-cli";
    fi;
    local generator_name;
    case ${CMAKE_MAKEFILE_GENERATOR} in 
        ninja)
            generator_name="Ninja"
        ;;
        emake)
            generator_name="Unix Makefiles"
        ;;
    esac;
    local cmakeargs=(${warn_unused_cli} -C "${common_config}" -G "${generator_name}" -DCMAKE_INSTALL_PREFIX="${EPREFIX}/usr" "${mycmakeargs_local[@]}" -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" -DCMAKE_TOOLCHAIN_FILE="${toolchain_file}");
    if [[ -n ${MYCMAKEARGS} ]]; then
        cmakeargs+=("${MYCMAKEARGS}");
    fi;
    if [[ -n "${CMAKE_EXTRA_CACHE_FILE}" ]]; then
        cmakeargs+=(-C "${CMAKE_EXTRA_CACHE_FILE}");
    fi;
    pushd "${BUILD_DIR}" > /dev/null || die;
    debug-print "${LINENO} ${ECLASS} ${FUNCNAME}: mycmakeargs is ${mycmakeargs_local[*]}";
    echo "${CMAKE_BINARY}" "${cmakeargs[@]}" "${CMAKE_USE_DIR}";
    "${CMAKE_BINARY}" "${cmakeargs[@]}" "${CMAKE_USE_DIR}" || die "cmake failed";
    popd > /dev/null || die
}
cmake_src_install () 
{ 
    debug-print-function ${FUNCNAME} "$@";
    _cmake_check_build_dir;
    pushd "${BUILD_DIR}" > /dev/null || die;
    DESTDIR="${D}" ${CMAKE_MAKEFILE_GENERATOR} install "$@" || die "died running ${CMAKE_MAKEFILE_GENERATOR} install";
    popd > /dev/null || die;
    if [[ ${EAPI} == 7 ]]; then
        pushd "${S}" > /dev/null || die;
        einstalldocs;
        popd > /dev/null || die;
    else
        pushd "${CMAKE_USE_DIR}" > /dev/null || die;
        einstalldocs;
        popd > /dev/null || die;
    fi
}
cmake_src_prepare () 
{ 
    debug-print-function ${FUNCNAME} "$@";
    if [[ ${EAPI} == 7 ]]; then
        pushd "${S}" > /dev/null || die;
    fi;
    _cmake_check_build_dir;
    default_src_prepare;
    if [[ ! -e ${CMAKE_USE_DIR}/CMakeLists.txt ]]; then
        eerror "Unable to locate CMakeLists.txt under:";
        eerror "\"${CMAKE_USE_DIR}/CMakeLists.txt\"";
        eerror "Consider not inheriting the cmake eclass.";
        die "FATAL: Unable to find CMakeLists.txt";
    fi;
    if [[ ${CMAKE_MAKEFILE_GENERATOR} == ninja ]] && ! has_version -b dev-util/ninja; then
        eerror "CMAKE_MAKEFILE_GENERATOR is set to ninja, but ninja is not installed.";
        die "Please install dev-util/ninja or unset CMAKE_MAKEFILE_GENERATOR.";
    fi;
    local modules_list;
    if [[ ${EAPI} == 7 && $(declare -p CMAKE_REMOVE_MODULES_LIST) != "declare -a"* ]]; then
        modules_list=(${CMAKE_REMOVE_MODULES_LIST});
    else
        modules_list=("${CMAKE_REMOVE_MODULES_LIST[@]}");
    fi;
    local name;
    for name in "${modules_list[@]}";
    do
        if [[ ${EAPI} == 7 ]]; then
            find "${S}" -name ${name}.cmake -exec rm -v {} + || die;
        else
            find -name "${name}.cmake" -exec rm -v {} + || die;
        fi;
    done;
    _cmake_modify-cmakelists;
    if [[ ${EAPI} == 7 ]]; then
        popd > /dev/null || die;
    fi;
    if [[ -n ${CMAKE_QA_SRC_DIR_READONLY} && ! -n ${CMAKE_IN_SOURCE_BUILD} ]]; then
        if [[ ${EAPI} == 7 ]]; then
            chmod -R a-w "${S}";
        else
            chmod -R a-w "${CMAKE_USE_DIR}";
        fi;
    fi;
    _CMAKE_SRC_PREPARE_HAS_RUN=1
}
cmake_src_test () 
{ 
    debug-print-function ${FUNCNAME} "$@";
    _cmake_check_build_dir;
    pushd "${BUILD_DIR}" > /dev/null || die;
    [[ -e CTestTestfile.cmake ]] || { 
        echo "No tests found. Skipping.";
        return 0
    };
    [[ -n ${TEST_VERBOSE} ]] && myctestargs+=(--extra-verbose --output-on-failure);
    set -- ctest -j "$(makeopts_jobs "${MAKEOPTS}" 999)" --test-load "$(makeopts_loadavg)" "${myctestargs[@]}" "$@";
    echo "$@" 1>&2;
    if "$@"; then
        einfo "Tests succeeded.";
        popd > /dev/null || die;
        return 0;
    else
        if [[ -n "${CMAKE_YES_I_WANT_TO_SEE_THE_TEST_LOG}" ]]; then
            eerror "Tests failed. Test log ${BUILD_DIR}/Testing/Temporary/LastTest.log follows:";
            eerror "--START TEST LOG--------------------------------------------------------------";
            cat "${BUILD_DIR}/Testing/Temporary/LastTest.log";
            eerror "--END TEST LOG----------------------------------------------------------------";
            die "Tests failed.";
        else
            die "Tests failed. When you file a bug, please attach the following file: \n\t${BUILD_DIR}/Testing/Temporary/LastTest.log";
        fi;
        popd > /dev/null || die;
        return 1;
    fi
}
cmake_use_find_package () 
{ 
    debug-print-function ${FUNCNAME} "$@";
    if [[ "$#" != 2 || -z $1 ]]; then
        die "Usage: cmake_use_find_package <USE flag> <package name>";
    fi;
    echo "-DCMAKE_DISABLE_FIND_PACKAGE_$2=$(use $1 && echo OFF || echo ON)"
}
comment_add_subdirectory () 
{ 
    die "comment_add_subdirectory is banned. Use cmake_comment_add_subdirectory instead"
}
dosym8 () 
{ 
    local option_r;
    case $1 in 
        -r)
            option_r=t;
            shift
        ;;
    esac;
    [[ $# -eq 2 ]] || die "${FUNCNAME}: bad number of arguments";
    local target=$1 link=$2;
    if [[ -n ${option_r} ]]; then
        local linkdir comp;
        [[ ${target} == /* ]] || die "${FUNCNAME}: -r specified but no absolute target path";
        target=$(_dosym8_canonicalize "${target}");
        linkdir=$(_dosym8_canonicalize "/${link#/}");
        linkdir=${linkdir%/*};
        linkdir=${linkdir:-/};
        local ifs_save=${IFS-' 	
'} IFS=/;
        for comp in ${linkdir};
        do
            if [[ ${target%%/*} == "${comp}" ]]; then
                target=${target#"${comp}"};
                target=${target#/};
            else
                target=..${target:+/}${target};
            fi;
        done;
        IFS=${ifs_save};
        target=${target:-.};
    fi;
    dosym "${target}" "${link}"
}
eapply () 
{ 
    local failed patch_cmd=patch;
    local -x LC_COLLATE=POSIX;
    type -P gpatch > /dev/null && patch_cmd=gpatch;
    function _eapply_patch () 
    { 
        local f=${1};
        local prefix=${2};
        ebegin "${prefix:-Applying }${f##*/}";
        local all_opts=(-p1 -f -g0 --no-backup-if-mismatch "${patch_options[@]}");
        if ${patch_cmd} "${all_opts[@]}" --dry-run -s -F0 < "${f}" &> /dev/null; then
            all_opts+=(-s -F0);
        fi;
        ${patch_cmd} "${all_opts[@]}" < "${f}";
        failed=${?};
        if ! eend "${failed}"; then
            __helpers_die "patch -p1 ${patch_options[*]} failed with ${f}";
        fi
    };
    local patch_options=() files=();
    local i found_doublehyphen;
    for ((i = 1; i <= ${#@}; ++i ))
    do
        if [[ ${@:i:1} == -- ]]; then
            patch_options=("${@:1:i-1}");
            files=("${@:i+1}");
            found_doublehyphen=1;
            break;
        fi;
    done;
    if [[ -z ${found_doublehyphen} ]]; then
        for ((i = 1; i <= ${#@}; ++i ))
        do
            if [[ ${@:i:1} != -* ]]; then
                patch_options=("${@:1:i-1}");
                files=("${@:i}");
                break;
            fi;
        done;
        for i in "${files[@]}";
        do
            if [[ ${i} == -* ]]; then
                die "eapply: all options must be passed before non-options";
            fi;
        done;
    fi;
    if [[ ${#files[@]} -eq 0 ]]; then
        die "eapply: no files specified";
    fi;
    local f;
    for f in "${files[@]}";
    do
        if [[ -d ${f} ]]; then
            function _eapply_get_files () 
            { 
                local LC_ALL=POSIX;
                local prev_shopt=$(shopt -p nullglob);
                shopt -s nullglob;
                local f;
                for f in "${1}"/*;
                do
                    if [[ ${f} == *.diff || ${f} == *.patch ]]; then
                        files+=("${f}");
                    fi;
                done;
                ${prev_shopt}
            };
            local files=();
            _eapply_get_files "${f}";
            [[ ${#files[@]} -eq 0 ]] && die "No *.{patch,diff} files in directory ${f}";
            einfo "Applying patches from ${f} ...";
            local f2;
            for f2 in "${files[@]}";
            do
                _eapply_patch "${f2}" '  ';
                [[ ${failed} -ne 0 ]] && return "${failed}";
            done;
        else
            _eapply_patch "${f}";
            [[ ${failed} -ne 0 ]] && return "${failed}";
        fi;
    done;
    return 0
}
eapply_user () 
{ 
    [[ ${EBUILD_PHASE} == prepare ]] || die "eapply_user() called during invalid phase: ${EBUILD_PHASE}";
    local tagfile=${T}/.portage_user_patches_applied;
    [[ -f ${tagfile} ]] && return;
     >> "${tagfile}";
    local basedir=${PORTAGE_CONFIGROOT%/}/etc/portage/patches;
    local columns=${COLUMNS:-0};
    [[ ${columns} == 0 ]] && columns=$(set -- $( ( stty size </dev/tty ) 2>/dev/null || echo 24 80 ) ; echo $2);
    (( columns > 0 )) || (( columns = 80 ));
    local applied d f;
    local -A _eapply_user_patches;
    local prev_shopt=$(shopt -p nullglob);
    shopt -s nullglob;
    for d in "${basedir}"/${CATEGORY}/{${P}-${PR},${P},${PN}}{:${SLOT%/*},};
    do
        for f in "${d}"/*;
        do
            if [[ ( ${f} == *.diff || ${f} == *.patch ) && -z ${_eapply_user_patches[${f##*/}]} ]]; then
                _eapply_user_patches[${f##*/}]=${f};
            fi;
        done;
    done;
    if [[ ${#_eapply_user_patches[@]} -gt 0 ]]; then
        while read -r -d '' f; do
            f=${_eapply_user_patches[${f}]};
            if [[ -s ${f} ]]; then
                if [[ -z ${applied} ]]; then
                    einfo "${PORTAGE_COLOR_INFO}$(for ((column = 0; column < ${columns} - 3; column++)); do echo -n =; done)${PORTAGE_COLOR_NORMAL}";
                    einfo "Applying user patches from ${basedir} ...";
                fi;
                eapply "${f}";
                applied=1;
            fi;
        done < <(printf -- '%s\0' "${!_eapply_user_patches[@]}" |
				LC_ALL=C sort -z);
    fi;
    ${prev_shopt};
    if [[ -n ${applied} ]]; then
        einfo "User patches applied.";
        einfo "${PORTAGE_COLOR_INFO}$(for ((column = 0; column < ${columns} - 3; column++)); do echo -n =; done)${PORTAGE_COLOR_NORMAL}";
    fi
}
econf_build () 
{ 
    local CBUILD=${CBUILD:-${CHOST}};
    tc-env_build econf --build=${CBUILD} --host=${CBUILD} "$@"
}
edos2unix () 
{ 
    [[ $# -eq 0 ]] && return 0;
    sed -i 's/\r$//' -- "$@" || die
}
einstalldocs () 
{ 
    ( if [[ $(declare -p DOCS 2>/dev/null) != *=* ]]; then
        local d;
        for d in README* ChangeLog AUTHORS NEWS TODO CHANGES THANKS BUGS FAQ CREDITS CHANGELOG;
        do
            [[ -f ${d} && -s ${d} ]] && docinto / && dodoc "${d}";
        done;
    else
        if ___is_indexed_array_var DOCS; then
            [[ ${#DOCS[@]} -gt 0 ]] && docinto / && dodoc -r "${DOCS[@]}";
        else
            [[ -n ${DOCS} ]] && docinto / && dodoc -r ${DOCS};
        fi;
    fi );
    ( if ___is_indexed_array_var HTML_DOCS; then
        [[ ${#HTML_DOCS[@]} -gt 0 ]] && docinto html && dodoc -r "${HTML_DOCS[@]}";
    else
        [[ -n ${HTML_DOCS} ]] && docinto html && dodoc -r ${HTML_DOCS};
    fi )
}
emktemp () 
{ 
    eqawarn "emktemp is deprecated. Create a temporary file in \${T} instead.";
    local exe="touch";
    [[ $1 == -d ]] && exe="mkdir" && shift;
    local topdir=$1;
    if [[ -z ${topdir} ]]; then
        [[ -z ${T} ]] && topdir="/tmp" || topdir=${T};
    fi;
    if ! type -P mktemp > /dev/null; then
        local tmp=/;
        while [[ -e ${tmp} ]]; do
            tmp=${topdir}/tmp.${RANDOM}.${RANDOM}.${RANDOM};
        done;
        ${exe} "${tmp}" || ${exe} -p "${tmp}";
        echo "${tmp}";
    else
        if [[ ${exe} == "touch" ]]; then
            TMPDIR="${topdir}" mktemp -t tmp.XXXXXXXXXX;
        else
            TMPDIR="${topdir}" mktemp -dt tmp.XXXXXXXXXX;
        fi;
    fi
}
eninja () 
{ 
    local nonfatal_args=();
    [[ ${EAPI} != 5 ]] && nonfatal_args+=(-n);
    if [[ -z ${NINJAOPTS+set} ]]; then
        NINJAOPTS="-j$(makeopts_jobs "${MAKEOPTS}" 999) -l$(makeopts_loadavg "${MAKEOPTS}" 0)";
    fi;
    set -- ninja -v ${NINJAOPTS} "$@";
    echo "$@" 1>&2;
    "$@" || die "${nonfatal_args[@]}" "${*} failed"
}
epytest () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    _python_check_EPYTHON;
    local color;
    case ${NOCOLOR} in 
        true | yes)
            color=no
        ;;
        *)
            color=yes
        ;;
    esac;
    local args=(-vv -ra -l -Wdefault "--color=${color}" -p no:cov -p no:flake8 -p no:flakes -p no:pylint);
    local x;
    for x in "${EPYTEST_DESELECT[@]}";
    do
        args+=(--deselect "${x}");
    done;
    for x in "${EPYTEST_IGNORE[@]}";
    do
        args+=(--ignore "${x}");
    done;
    set -- "${EPYTHON}" -m pytest "${args[@]}" "${@}";
    echo "${@}" 1>&2;
    "${@}" || die -n "pytest failed with ${EPYTHON}";
    local ret=${?};
    rm -rf .hypothesis .pytest_cache || die;
    return ${ret}
}
eunittest () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    _python_check_EPYTHON;
    set -- "${EPYTHON}" -m unittest_or_fail discover -v "${@}";
    echo "${@}" 1>&2;
    "${@}" || die -n "Tests failed with ${EPYTHON}";
    return ${?}
}
filter-flags () 
{ 
    _filter-hardened "$@";
    local v;
    for v in $(all-flag-vars);
    do
        _filter-var ${v} "$@";
    done;
    return 0
}
filter-ldflags () 
{ 
    _filter-var LDFLAGS "$@";
    return 0
}
filter-lfs-flags () 
{ 
    [[ $# -ne 0 ]] && die "filter-lfs-flags takes no arguments";
    filter-flags -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_TIME_BITS=64
}
filter-mfpmath () 
{ 
    local orig_mfpmath new_math prune_math;
    orig_mfpmath=$(get-flag -mfpmath);
    new_math=$(get-flag mfpmath);
    new_math=${new_math/both/387,sse};
    new_math=" ${new_math//[,+]/ } ";
    prune_math="";
    for prune_math in "$@";
    do
        new_math=${new_math/ ${prune_math} / };
    done;
    new_math=$(echo ${new_math});
    new_math=${new_math// /,};
    if [[ -z ${new_math} ]]; then
        filter-flags ${orig_mfpmath};
    else
        replace-flags ${orig_mfpmath} -mfpmath=${new_math};
    fi;
    return 0
}
gcc-fullversion () 
{ 
    _gcc_fullversion '$1.$2.$3' "$@"
}
gcc-major-version () 
{ 
    _gcc_fullversion '$1' "$@"
}
gcc-micro-version () 
{ 
    _gcc_fullversion '$3' "$@"
}
gcc-minor-version () 
{ 
    _gcc_fullversion '$2' "$@"
}
gcc-specs-directive () 
{ 
    local directive subdname subdirective;
    directive="$(_gcc-specs-directive_raw $1)";
    while [[ ${directive} == *%\(*\)* ]]; do
        subdname=${directive/*%\(};
        subdname=${subdname/\)*};
        subdirective="$(_gcc-specs-directive_raw ${subdname})";
        directive="${directive//\%(${subdname})/${subdirective}}";
    done;
    echo "${directive}";
    return 0
}
gcc-specs-nostrict () 
{ 
    local directive;
    directive=$(gcc-specs-directive cc1);
    [[ "${directive/\{!fstrict-overflow:}" != "${directive}" ]]
}
gcc-specs-now () 
{ 
    local directive;
    directive=$(gcc-specs-directive link_command);
    [[ "${directive/\{!nonow:}" != "${directive}" ]]
}
gcc-specs-pie () 
{ 
    local directive;
    directive=$(gcc-specs-directive cc1);
    [[ "${directive/\{!nopie:}" != "${directive}" ]]
}
gcc-specs-relro () 
{ 
    local directive;
    directive=$(gcc-specs-directive link_command);
    [[ "${directive/\{!norelro:}" != "${directive}" ]]
}
gcc-specs-ssp () 
{ 
    local directive;
    directive=$(gcc-specs-directive cc1);
    [[ "${directive/\{!fno-stack-protector:}" != "${directive}" ]]
}
gcc-specs-ssp-to-all () 
{ 
    local directive;
    directive=$(gcc-specs-directive cc1);
    [[ "${directive/\{!fno-stack-protector-all:}" != "${directive}" ]]
}
gcc-specs-stack-check () 
{ 
    local directive;
    directive=$(gcc-specs-directive cc1);
    [[ "${directive/\{!fno-stack-check:}" != "${directive}" ]]
}
gcc-version () 
{ 
    _gcc_fullversion '$1.$2' "$@"
}
gen_usr_ldscript () 
{ 
    ewarn "${FUNCNAME}: Please migrate to usr-ldscript.eclass";
    local lib libdir=$(get_libdir) output_format="" auto=false suffix=$(get_libname);
    [[ -z ${ED+set} ]] && local ED=${D%/}${EPREFIX}/;
    tc-is-static-only && return;
    if [[ $(type -t multilib_is_native_abi) == "function" ]]; then
        multilib_is_native_abi || return 0;
    fi;
    case ${CTARGET:-${CHOST}} in 
        *-darwin*)

        ;;
        *-android*)
            return 0
        ;;
        *linux* | *-freebsd* | *-openbsd* | *-netbsd*)
            use prefix && return 0
        ;;
        *)
            return 0
        ;;
    esac;
    dodir /usr/${libdir};
    if [[ $1 == "-a" ]]; then
        auto=true;
        shift;
        dodir /${libdir};
    fi;
    local flags=(${CFLAGS} ${LDFLAGS} -Wl,--verbose);
    if $(tc-getLD) --version | grep -q 'GNU gold'; then
        local d="${T}/bfd-linker";
        mkdir -p "${d}";
        ln -sf $(which ${CHOST}-ld.bfd) "${d}"/ld;
        flags+=(-B"${d}");
    fi;
    output_format=$($(tc-getCC) "${flags[@]}" 2>&1 | sed -n 's/^OUTPUT_FORMAT("\([^"]*\)",.*/\1/p');
    [[ -n ${output_format} ]] && output_format="OUTPUT_FORMAT ( ${output_format} )";
    for lib in "$@";
    do
        local tlib;
        if ${auto}; then
            lib="lib${lib}${suffix}";
        else
            [[ -r ${ED}/${libdir}/${lib} ]] || continue;
        fi;
        case ${CTARGET:-${CHOST}} in 
            *-darwin*)
                if ${auto}; then
                    tlib=$(scanmacho -qF'%S#F' "${ED}"/usr/${libdir}/${lib});
                else
                    tlib=$(scanmacho -qF'%S#F' "${ED}"/${libdir}/${lib});
                fi;
                [[ -z ${tlib} ]] && die "unable to read install_name from ${lib}";
                tlib=${tlib##*/};
                if ${auto}; then
                    mv "${ED}"/usr/${libdir}/${lib%${suffix}}.*${suffix#.} "${ED}"/${libdir}/ || die;
                    if [[ ${tlib} != ${lib%${suffix}}.*${suffix#.} ]]; then
                        mv "${ED}"/usr/${libdir}/${tlib%${suffix}}.*${suffix#.} "${ED}"/${libdir}/ || die;
                    fi;
                    rm -f "${ED}"/${libdir}/${lib};
                fi;
                if [[ ! -w "${ED}/${libdir}/${tlib}" ]]; then
                    chmod u+w "${ED}${libdir}/${tlib}";
                    local nowrite=yes;
                fi;
                install_name_tool -id "${EPREFIX}"/${libdir}/${tlib} "${ED}"/${libdir}/${tlib} || die "install_name_tool failed";
                [[ -n ${nowrite} ]] && chmod u-w "${ED}${libdir}/${tlib}";
                pushd "${ED}/usr/${libdir}" > /dev/null;
                ln -snf "../../${libdir}/${tlib}" "${lib}";
                popd > /dev/null
            ;;
            *)
                if ${auto}; then
                    tlib=$(scanelf -qF'%S#F' "${ED}"/usr/${libdir}/${lib});
                    [[ -z ${tlib} ]] && die "unable to read SONAME from ${lib}";
                    mv "${ED}"/usr/${libdir}/${lib}* "${ED}"/${libdir}/ || die;
                    if [[ ${tlib} != ${lib}* ]]; then
                        mv "${ED}"/usr/${libdir}/${tlib}* "${ED}"/${libdir}/ || die;
                    fi;
                    rm -f "${ED}"/${libdir}/${lib};
                else
                    tlib=${lib};
                fi;
                cat > "${ED}/usr/${libdir}/${lib}" <<-END_LDSCRIPT
/* GNU ld script
   Since Gentoo has critical dynamic libraries in /lib, and the static versions
   in /usr/lib, we need to have a "fake" dynamic lib in /usr/lib, otherwise we
   run into linking problems.  This "fake" dynamic lib is a linker script that
   redirects the linker to the real lib.  And yes, this works in the cross-
   compiling scenario as the sysroot-ed linker will prepend the real path.

   See bug https://bugs.gentoo.org/4411 for more info.
 */
${output_format}
GROUP ( ${EPREFIX}/${libdir}/${tlib} )
END_LDSCRIPT

            ;;
        esac
        fperms a+x "/usr/${libdir}/${lib}" || die "could not change perms on ${lib}";
    done
}
get-flag () 
{ 
    [[ $# -ne 1 ]] && die "usage: <flag>";
    local f var findflag="$1";
    for var in $(all-flag-vars);
    do
        for f in ${!var};
        do
            if [ "${f/${findflag}}" != "${f}" ]; then
                printf "%s\n" "${f/-${findflag}=}";
                return 0;
            fi;
        done;
    done;
    return 1
}
get_abi_CFLAGS () 
{ 
    get_abi_var CFLAGS "$@"
}
get_abi_CHOST () 
{ 
    get_abi_var CHOST "$@"
}
get_abi_CTARGET () 
{ 
    get_abi_var CTARGET "$@"
}
get_abi_FAKE_TARGETS () 
{ 
    get_abi_var FAKE_TARGETS "$@"
}
get_abi_LDFLAGS () 
{ 
    get_abi_var LDFLAGS "$@"
}
get_abi_LIBDIR () 
{ 
    get_abi_var LIBDIR "$@"
}
get_abi_var () 
{ 
    local flag=$1;
    local abi=${2:-${ABI:-${DEFAULT_ABI:-default}}};
    local var="${flag}_${abi}";
    echo ${!var}
}
get_all_abis () 
{ 
    local x order="" mvar dvar;
    mvar="MULTILIB_ABIS";
    dvar="DEFAULT_ABI";
    if [[ -n $1 ]]; then
        mvar="$1_${mvar}";
        dvar="$1_${dvar}";
    fi;
    if [[ -z ${!mvar} ]]; then
        echo "default";
        return 0;
    fi;
    for x in ${!mvar};
    do
        if [[ ${x} != ${!dvar} ]]; then
            order="${order:+${order} }${x}";
        fi;
    done;
    order="${order:+${order} }${!dvar}";
    echo ${order};
    return 0
}
get_all_libdirs () 
{ 
    local libdirs abi;
    for abi in ${MULTILIB_ABIS};
    do
        libdirs+=" $(get_abi_LIBDIR ${abi})";
    done;
    [[ " ${libdirs} " != *" lib "* ]] && libdirs+=" lib";
    echo "${libdirs}"
}
get_distribution_components () 
{ 
    local sep=${1-;};
    local out=(LLVM LTO Remarks llvm-config cmake-exports llvm-headers LLVMDemangle LLVMSupport LLVMTableGen);
    if multilib_is_native_abi; then
        out+=(llvm-tblgen FileCheck llvm-PerfectShuffle count not yaml-bench bugpoint dsymutil llc lli lli-child-target llvm-addr2line llvm-ar llvm-as llvm-bcanalyzer llvm-bitcode-strip llvm-c-test llvm-cat llvm-cfi-verify llvm-config llvm-cov llvm-cvtres llvm-cxxdump llvm-cxxfilt llvm-cxxmap llvm-diff llvm-dis llvm-dlltool llvm-dwarfdump llvm-dwp llvm-exegesis llvm-extract llvm-gsymutil llvm-ifs llvm-install-name-tool llvm-jitlink llvm-jitlink-executor llvm-lib llvm-libtool-darwin llvm-link llvm-lipo llvm-lto llvm-lto2 llvm-mc llvm-mca llvm-ml llvm-modextract llvm-mt llvm-nm llvm-objcopy llvm-objdump llvm-opt-report llvm-otool llvm-pdbutil llvm-profdata llvm-profgen llvm-ranlib llvm-rc llvm-readelf llvm-readobj llvm-reduce llvm-rtdyld llvm-sim llvm-size llvm-split llvm-stress llvm-strings llvm-strip llvm-symbolizer llvm-tapi-diff llvm-undname llvm-windres llvm-xray obj2yaml opt sancov sanstats split-file verify-uselistorder yaml2obj opt-viewer);
        if llvm_are_manpages_built; then
            out+=(docs-dsymutil-man docs-llvm-dwarfdump-man docs-llvm-man);
        fi;
        use doc && out+=(docs-llvm-html);
        use binutils-plugin && out+=(LLVMgold);
    fi;
    printf "%s${sep}" "${out[@]}"
}
get_exeext () 
{ 
    case ${CHOST} in 
        *-cygwin* | mingw* | *-mingw*)
            echo ".exe"
        ;;
    esac
}
get_install_abis () 
{ 
    local x order="";
    if [[ -z ${MULTILIB_ABIS} ]]; then
        echo "default";
        return 0;
    fi;
    if [[ ${EMULTILIB_PKG} == "true" ]]; then
        for x in ${MULTILIB_ABIS};
        do
            if [[ ${x} != "${DEFAULT_ABI}" ]]; then
                has ${x} ${ABI_DENY} || order="${order} ${x}";
            fi;
        done;
        has ${DEFAULT_ABI} ${ABI_DENY} || order="${order} ${DEFAULT_ABI}";
        if [[ -n ${ABI_ALLOW} ]]; then
            local ordera="";
            for x in ${order};
            do
                if has ${x} ${ABI_ALLOW}; then
                    ordera="${ordera} ${x}";
                fi;
            done;
            order=${ordera};
        fi;
    else
        order=${DEFAULT_ABI};
    fi;
    if [[ -z ${order} ]]; then
        die "The ABI list is empty.  Are you using a proper multilib profile?  Perhaps your USE flags or MULTILIB_ABIS are too restrictive for this package.";
    fi;
    echo ${order};
    return 0
}
get_libdir () 
{ 
    local libdir_var="LIBDIR_${ABI}";
    local libdir="lib";
    [[ -n ${ABI} && -n ${!libdir_var} ]] && libdir=${!libdir_var};
    echo "${libdir}"
}
get_libname () 
{ 
    local libname;
    local ver=$1;
    case ${CHOST} in 
        *-cygwin*)
            libname="dll.a"
        ;;
        mingw* | *-mingw*)
            libname="dll"
        ;;
        *-darwin*)
            libname="dylib"
        ;;
        *-mint*)
            libname="irrelevant"
        ;;
        hppa*-hpux*)
            libname="sl"
        ;;
        *)
            libname="so"
        ;;
    esac;
    if [[ -z $* ]]; then
        echo ".${libname}";
    else
        for ver in "$@";
        do
            case ${CHOST} in 
                *-cygwin*)
                    echo ".${ver}.${libname}"
                ;;
                *-darwin*)
                    echo ".${ver}.${libname}"
                ;;
                *-mint*)
                    echo ".${libname}"
                ;;
                *)
                    echo ".${libname}.${ver}"
                ;;
            esac;
        done;
    fi
}
get_lit_flags () 
{ 
    echo "-vv;-j;${LIT_JOBS:-$(makeopts_jobs)}"
}
get_modname () 
{ 
    local modname;
    local ver=$1;
    case ${CHOST} in 
        *-darwin*)
            modname="bundle"
        ;;
        *)
            modname="so"
        ;;
    esac;
    echo ".${modname}"
}
get_nproc () 
{ 
    local nproc;
    if type -P nproc &> /dev/null; then
        nproc=$(nproc);
    fi;
    if [[ -z ${nproc} ]] && type -P sysctl &> /dev/null; then
        nproc=$(sysctl -n hw.ncpu 2>/dev/null);
    fi;
    if [[ -z ${nproc} ]] && type -P python &> /dev/null; then
        nproc=$(python -c 'import multiprocessing; print(multiprocessing.cpu_count());' 2>/dev/null);
    fi;
    if [[ -n ${nproc} ]]; then
        echo "${nproc}";
    else
        echo "${1:-1}";
    fi
}
has_multilib_profile () 
{ 
    [ -n "${MULTILIB_ABIS}" -a "${MULTILIB_ABIS}" != "${MULTILIB_ABIS/ /}" ]
}
host-is-pax () 
{ 
    grep -qs ^PaX: /proc/self/status
}
in_iuse () 
{ 
    local use=${1};
    if [[ -z "${use}" ]]; then
        echo "!!! in_iuse() called without a parameter." 1>&2;
        echo "!!! in_iuse <USEFLAG>" 1>&2;
        die "in_iuse() called without a parameter";
    fi;
    local liuse=(${IUSE_EFFECTIVE});
    has "${use}" "${liuse[@]#[+-]}"
}
is-flag () 
{ 
    is-flagq "$@" && echo true
}
is-flagq () 
{ 
    [[ -n $2 ]] && die "Usage: is-flag <flag>";
    local var;
    for var in $(all-flag-vars);
    do
        _is_flagq ${var} "$1" && return 0;
    done;
    return 1
}
is-ldflag () 
{ 
    is-ldflagq "$@" && echo true
}
is-ldflagq () 
{ 
    [[ -n $2 ]] && die "Usage: is-ldflag <flag>";
    _is_flagq LDFLAGS $1
}
is_final_abi () 
{ 
    has_multilib_profile || return 0;
    set -- $(get_install_abis);
    local LAST_ABI=$#;
    [[ ${!LAST_ABI} == ${ABI} ]]
}
is_libcxx_linked () 
{ 
    local code='#include <ciso646>
#if defined(_LIBCPP_VERSION)
	HAVE_LIBCXX
#endif
';
    local out=$($(tc-getCXX) ${CXXFLAGS} ${CPPFLAGS} -x c++ -E -P - <<<"${code}") || return 1;
    [[ ${out} == *HAVE_LIBCXX* ]]
}
list-paxables () 
{ 
    file "$@" 2> /dev/null | grep -E 'ELF.*(executable|shared object)' | sed -e 's/: .*$//'
}
llvm.org_set_globals () 
{ 
    if [[ $(declare -p LLVM_COMPONENTS) != "declare -a"* ]]; then
        die 'LLVM_COMPONENTS must be an array.';
    fi;
    if declare -p LLVM_TEST_COMPONENTS &> /dev/null; then
        if [[ $(declare -p LLVM_TEST_COMPONENTS) != "declare -a"* ]]; then
            die 'LLVM_TEST_COMPONENTS must be an array.';
        fi;
    fi;
    if [[ ${_LLVM_SOURCE_TYPE} == git ]]; then
        EGIT_REPO_URI="https://github.com/llvm/llvm-project.git";
        [[ ${PV} != ${_LLVM_MASTER_MAJOR}.* ]] && EGIT_BRANCH="release/${PV%%.*}.x";
    else
        if [[ ${_LLVM_SOURCE_TYPE} == tar ]]; then
            SRC_URI+="
			https://github.com/llvm/llvm-project/archive/llvmorg-${PV/_/-}.tar.gz";
        else
            die "Invalid _LLVM_SOURCE_TYPE: ${LLVM_SOURCE_TYPE}";
        fi;
    fi;
    S=${WORKDIR}/${LLVM_COMPONENTS[0]};
    if [[ -n ${LLVM_TEST_COMPONENTS+1} ]]; then
        IUSE+=" test";
        RESTRICT+=" !test? ( test )";
    fi;
    case ${LLVM_MANPAGES:-__unset__} in 
        __unset__)

        ;;
        build)
            IUSE+=" doc";
            BDEPEND+=" dev-python/sphinx"
        ;;
        pregenerated)
            IUSE+=" doc";
            SRC_URI+="
				!doc? (
					https://dev.gentoo.org/~mgorny/dist/llvm/llvm-${PV}-manpages.tar.bz2
				)"
        ;;
        *)
            die "Invalid LLVM_MANPAGES=${LLVM_MANPAGES}"
        ;;
    esac;
    if [[ -n ${LLVM_PATCHSET} ]]; then
        SRC_URI+="
			https://dev.gentoo.org/~mgorny/dist/llvm/llvm-gentoo-patchset-${LLVM_PATCHSET}.tar.xz";
    fi;
    local x;
    case ${LLVM_USE_TARGETS:-__unset__} in 
        __unset__)

        ;;
        provide | llvm)
            IUSE+=" ${ALL_LLVM_TARGET_FLAGS[*]}";
            REQUIRED_USE+=" || ( ${ALL_LLVM_TARGET_FLAGS[*]} )"
        ;;&
        llvm)
            local dep=;
            for x in "${ALL_LLVM_TARGET_FLAGS[@]}";
            do
                dep+="
					${x}? ( ~sys-devel/llvm-${PV}[${x}] )";
            done;
            RDEPEND+=" ${dep}";
            DEPEND+=" ${dep}"
        ;;
    esac;
    CMAKE_BUILD_TYPE=RelWithDebInfo;
    _LLVM_ORG_SET_GLOBALS_CALLED=1
}
llvm.org_src_prepare () 
{ 
    if [[ -n ${LLVM_PATCHSET} ]]; then
        local PATCHES=("${PATCHES[@]}" "${WORKDIR}/llvm-gentoo-patchset-${LLVM_PATCHSET}");
    fi;
    pushd "${WORKDIR}" > /dev/null || die;
    if declare -f cmake_src_prepare > /dev/null; then
        CMAKE_USE_DIR=${S};
        if [[ ${EAPI} == 7 ]]; then
            local S=${WORKDIR};
        fi;
        cmake_src_prepare;
    else
        default_src_prepare;
    fi;
    popd > /dev/null || die
}
llvm.org_src_unpack () 
{ 
    if [[ ! -n ${_LLVM_ORG_SET_GLOBALS_CALLED} ]]; then
        die "llvm.org_set_globals must be called in global scope";
    fi;
    local components=("${LLVM_COMPONENTS[@]}");
    if [[ -n ${LLVM_TEST_COMPONENTS+1} ]] && use test; then
        components+=("${LLVM_TEST_COMPONENTS[@]}");
    fi;
    if [[ ${_LLVM_SOURCE_TYPE} == git ]]; then
        git-r3_fetch;
        git-r3_checkout '' . '' "${components[@]}";
        default_src_unpack;
    else
        local archive=llvmorg-${PV/_/-}.tar.gz;
        ebegin "Unpacking from ${archive}";
        tar -x -z -o --strip-components 1 -f "${DISTDIR}/${archive}" "${components[@]/#/llvm-project-${archive%.tar*}/}" || die;
        eend ${?};
        local x;
        for x in ${A};
        do
            [[ ${x} != ${archive} ]] && unpack "${x}";
        done;
    fi;
    if [[ -n ${LLVM_PATCHSET} ]]; then
        local nocomp=$(grep -r -L "^Gentoo-Component:" 			"${WORKDIR}/llvm-gentoo-patchset-${LLVM_PATCHSET}");
        if [[ -n ${nocomp} ]]; then
            die "Patches lacking Gentoo-Component found: ${nocomp}";
        fi;
        local IFS='|';
        grep -E -r -L "^Gentoo-Component:.*(${components[*]})" "${WORKDIR}/llvm-gentoo-patchset-${LLVM_PATCHSET}" | xargs rm;
        local status=("${PIPESTATUS[@]}");
        [[ ${status[1]} -ne 0 ]] && die "rm failed";
        [[ ${status[0]} -ne 0 ]] && die "No patches in the patchset apply to the package";
    fi
}
llvm_are_manpages_built () 
{ 
    use doc || [[ ${LLVM_MANPAGES} == build ]]
}
llvm_install_manpages () 
{ 
    if ! llvm_are_manpages_built; then
        insinto "/usr/lib/llvm/${SLOT}/share/man/man1";
        doins "${WORKDIR}/llvm-${PV}-manpages/${LLVM_COMPONENTS[0]}"/*.1;
    fi
}
make_wrapper () 
{ 
    local wrapper=$1 bin=$2 chdir=$3 libdir=$4 path=$5;
    local tmpwrapper="${T}/tmp.wrapper.${wrapper##*/}";
    ( echo '#!/bin/sh';
    if [[ -n ${libdir} ]]; then
        local var;
        if [[ ${CHOST} == *-darwin* ]]; then
            var=DYLD_LIBRARY_PATH;
        else
            var=LD_LIBRARY_PATH;
        fi;
        sed 's/^X//' <<-EOF || 
if [ "\${${var}+set}" = "set" ] ; then
X	export ${var}="\${${var}}:${EPREFIX}${libdir}"
else
X	export ${var}="${EPREFIX}${libdir}"
fi
EOF
 die;
    fi
    [[ -n ${chdir} ]] && printf 'cd "%s" &&\n' "${EPREFIX}${chdir}";
    printf 'exec %s "$@"\n' "${bin/#\//${EPREFIX}/}" ) > "${tmpwrapper}";
    chmod go+rx "${tmpwrapper}";
    if [[ -n ${path} ]]; then
        ( exeopts -m 0755;
        exeinto "${path}";
        newexe "${tmpwrapper}" "${wrapper}" ) || die;
    else
        newbin "${tmpwrapper}" "${wrapper}";
    fi
}
makeopts_jobs () 
{ 
    [[ $# -eq 0 ]] && set -- "${MAKEOPTS}";
    local jobs=$(echo " $* " | sed -r -n 		-e 's:.*[[:space:]](-[a-z]*j|--jobs[=[:space:]])[[:space:]]*([0-9]+).*:\2:p' 		-e "s:.*[[:space:]](-[a-z]*j|--jobs)[[:space:]].*:${2:-$(( $(get_nproc) + 1 ))}:p");
    echo ${jobs:-1}
}
makeopts_loadavg () 
{ 
    [[ $# -eq 0 ]] && set -- "${MAKEOPTS}";
    local lavg=$(echo " $* " | sed -r -n 		-e 's:.*[[:space:]](-[a-z]*l|--(load-average|max-load)[=[:space:]])[[:space:]]*([0-9]+(\.[0-9]+)?)[[:space:]].*:\3:p' 		-e "s:.*[[:space:]](-[a-z]*l|--(load-average|max-load))[[:space:]].*:${2:-999}:p");
    echo ${lavg:-${2:-999}}
}
multibuild_copy_sources () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local _MULTIBUILD_INITIAL_BUILD_DIR=${BUILD_DIR:-${S}};
    einfo "Will copy sources from ${_MULTIBUILD_INITIAL_BUILD_DIR}";
    function _multibuild_create_source_copy () 
    { 
        einfo "${MULTIBUILD_VARIANT}: copying to ${BUILD_DIR}";
        cp -p -R --reflink=auto "${_MULTIBUILD_INITIAL_BUILD_DIR}" "${BUILD_DIR}" || die
    };
    multibuild_foreach_variant _multibuild_create_source_copy
}
multibuild_for_best_variant () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    [[ -n ${MULTIBUILD_VARIANTS} ]] || die "MULTIBUILD_VARIANTS need to be set";
    local MULTIBUILD_VARIANTS=("${MULTIBUILD_VARIANTS[-1]}");
    multibuild_foreach_variant "${@}"
}
multibuild_foreach_variant () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    [[ -n ${MULTIBUILD_VARIANTS} ]] || die "MULTIBUILD_VARIANTS need to be set";
    local bdir=${BUILD_DIR:-${S}};
    [[ ${bdir%%/} == ${WORKDIR%%/} ]] && bdir=${WORKDIR}/build;
    local prev_id=${MULTIBUILD_ID:+${MULTIBUILD_ID}-};
    local ret=0 lret=0 v;
    debug-print "${FUNCNAME}: initial build_dir = ${bdir}";
    for v in "${MULTIBUILD_VARIANTS[@]}";
    do
        local MULTIBUILD_VARIANT=${v};
        local MULTIBUILD_ID=${prev_id}${v};
        local BUILD_DIR=${bdir%%/}-${v};
        function _multibuild_run () 
        { 
            local i=1;
            while [[ ${!i} == _* ]]; do
                (( i += 1 ));
            done;
            [[ ${i} -le ${#} ]] && einfo "${v}: running ${@:${i}}";
            "${@}"
        };
        _multibuild_run "${@}" > >(exec tee -a "${T}/build-${MULTIBUILD_ID}.log") 2>&1;
        lret=${?};
    done;
    [[ ${ret} -eq 0 && ${lret} -ne 0 ]] && ret=${lret};
    return ${ret}
}
multibuild_merge_root () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local src=${1};
    local dest=${2};
    cp -a --reflink=auto "${src}"/. "${dest}"/ || die "${MULTIBUILD_VARIANT:-(unknown)}: merging image failed";
    rm -rf "${src}" || die
}
multilib-minimal_src_compile () 
{ 
    debug-print-function ${FUNCNAME} "$@";
    function multilib-minimal_abi_src_compile () 
    { 
        debug-print-function ${FUNCNAME} "$@";
        pushd "${BUILD_DIR}" > /dev/null || die;
        if declare -f multilib_src_compile > /dev/null; then
            multilib_src_compile;
        else
            default_src_compile;
        fi;
        popd > /dev/null || die
    };
    multilib_foreach_abi multilib-minimal_abi_src_compile
}
multilib-minimal_src_configure () 
{ 
    debug-print-function ${FUNCNAME} "$@";
    function multilib-minimal_abi_src_configure () 
    { 
        debug-print-function ${FUNCNAME} "$@";
        mkdir -p "${BUILD_DIR}" || die;
        pushd "${BUILD_DIR}" > /dev/null || die;
        if declare -f multilib_src_configure > /dev/null; then
            multilib_src_configure;
        else
            default_src_configure;
        fi;
        popd > /dev/null || die
    };
    multilib_foreach_abi multilib-minimal_abi_src_configure
}
multilib-minimal_src_install () 
{ 
    debug-print-function ${FUNCNAME} "$@";
    function multilib-minimal_abi_src_install () 
    { 
        debug-print-function ${FUNCNAME} "$@";
        pushd "${BUILD_DIR}" > /dev/null || die;
        if declare -f multilib_src_install > /dev/null; then
            multilib_src_install;
        else
            if [[ -f Makefile || -f GNUmakefile || -f makefile ]]; then
                emake DESTDIR="${D}" install;
            fi;
        fi;
        multilib_prepare_wrappers;
        multilib_check_headers;
        popd > /dev/null || die
    };
    multilib_foreach_abi multilib-minimal_abi_src_install;
    multilib_install_wrappers;
    if declare -f multilib_src_install_all > /dev/null; then
        multilib_src_install_all;
    else
        einstalldocs;
    fi
}
multilib-minimal_src_test () 
{ 
    debug-print-function ${FUNCNAME} "$@";
    function multilib-minimal_abi_src_test () 
    { 
        debug-print-function ${FUNCNAME} "$@";
        pushd "${BUILD_DIR}" > /dev/null || die;
        if declare -f multilib_src_test > /dev/null; then
            multilib_src_test;
        else
            default_src_test;
        fi;
        popd > /dev/null || die
    };
    multilib_foreach_abi multilib-minimal_abi_src_test
}
multilib_check_headers () 
{ 
    function _multilib_header_cksum () 
    { 
        set -o pipefail;
        if [[ -d ${ED%/}/usr/include ]]; then
            find "${ED%/}"/usr/include -type f -exec cksum {} + | sort -k2;
        fi
    };
    local cksum cksum_prev;
    local cksum_file=${T}/.multilib_header_cksum;
    cksum=$(_multilib_header_cksum) || die;
    unset -f _multilib_header_cksum;
    if [[ -f ${cksum_file} ]]; then
        cksum_prev=$(< "${cksum_file}") || die;
        if [[ ${cksum} != ${cksum_prev} ]]; then
            echo "${cksum}" > "${cksum_file}.new" || die;
            eerror "Header files have changed between ABIs.";
            if type -p diff &> /dev/null; then
                eerror "$(diff -du "${cksum_file}" "${cksum_file}.new")";
            else
                eerror "Old checksums in: ${cksum_file}";
                eerror "New checksums in: ${cksum_file}.new";
            fi;
            die "Header checksum mismatch, aborting.";
        fi;
    else
        echo "${cksum}" > "${cksum_file}" || die;
    fi
}
multilib_copy_sources () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local MULTIBUILD_VARIANTS=($(multilib_get_enabled_abi_pairs));
    multibuild_copy_sources
}
multilib_env () 
{ 
    local CTARGET=${1:-${CTARGET}};
    local cpu=${CTARGET%%*-};
    if [[ ${CTARGET} = *-musl* ]]; then
        : ${MULTILIB_ABIS=default};
        : ${DEFAULT_ABI=default};
        export MULTILIB_ABIS DEFAULT_ABI;
        return;
    fi;
    case ${cpu} in 
        aarch64*)
            export CFLAGS_arm=${CFLAGS_arm-};
            case ${cpu} in 
                aarch64*be)
                    export CHOST_arm="armv8b-${CTARGET#*-}"
                ;;
                *)
                    export CHOST_arm="armv8l-${CTARGET#*-}"
                ;;
            esac;
            CHOST_arm=${CHOST_arm/%-gnu/-gnueabi};
            export CTARGET_arm=${CHOST_arm};
            export LIBDIR_arm="lib";
            export CFLAGS_arm64=${CFLAGS_arm64-};
            export CHOST_arm64=${CTARGET};
            export CTARGET_arm64=${CHOST_arm64};
            export LIBDIR_arm64="lib64";
            : ${MULTILIB_ABIS=arm64};
            : ${DEFAULT_ABI=arm64}
        ;;
        x86_64*)
            export CFLAGS_x86=${CFLAGS_x86--m32};
            export CHOST_x86=${CTARGET/x86_64/i686};
            CHOST_x86=${CHOST_x86/%-gnux32/-gnu};
            export CTARGET_x86=${CHOST_x86};
            if [[ ${SYMLINK_LIB} == "yes" ]]; then
                export LIBDIR_x86="lib32";
            else
                export LIBDIR_x86="lib";
            fi;
            export CFLAGS_amd64=${CFLAGS_amd64--m64};
            export CHOST_amd64=${CTARGET/%-gnux32/-gnu};
            export CTARGET_amd64=${CHOST_amd64};
            export LIBDIR_amd64="lib64";
            export CFLAGS_x32=${CFLAGS_x32--mx32};
            export CHOST_x32=${CTARGET/%-gnu/-gnux32};
            export CTARGET_x32=${CHOST_x32};
            export LIBDIR_x32="libx32";
            case ${CTARGET} in 
                *-gnux32)
                    : ${MULTILIB_ABIS=x32 amd64 x86};
                    : ${DEFAULT_ABI=x32}
                ;;
                *)
                    : ${MULTILIB_ABIS=amd64 x86};
                    : ${DEFAULT_ABI=amd64}
                ;;
            esac
        ;;
        loongarch64*)
            export CFLAGS_lp64d=${CFLAGS_lp64d--mabi=lp64d};
            export CHOST_lp64d=${CTARGET};
            export CTARGET_lp64d=${CTARGET};
            export LIBDIR_lp64d=${LIBDIR_lp64d-lib64};
            : ${MULTILIB_ABIS=lp64d};
            : ${DEFAULT_ABI=lp64d}
        ;;
        mips64* | mipsisa64*)
            export CFLAGS_o32=${CFLAGS_o32--mabi=32};
            export CHOST_o32=${CTARGET/mips64/mips};
            export CHOST_o32=${CHOST_o32/mipsisa64/mipsisa32};
            export CTARGET_o32=${CHOST_o32};
            export LIBDIR_o32="lib";
            export CFLAGS_n32=${CFLAGS_n32--mabi=n32};
            export CHOST_n32=${CTARGET};
            export CTARGET_n32=${CHOST_n32};
            export LIBDIR_n32="lib32";
            export CFLAGS_n64=${CFLAGS_n64--mabi=64};
            export CHOST_n64=${CTARGET};
            export CTARGET_n64=${CHOST_n64};
            export LIBDIR_n64="lib64";
            : ${MULTILIB_ABIS=n64 n32 o32};
            : ${DEFAULT_ABI=n32}
        ;;
        powerpc64*)
            export CFLAGS_ppc=${CFLAGS_ppc--m32};
            export CHOST_ppc=${CTARGET/powerpc64/powerpc};
            export CTARGET_ppc=${CHOST_ppc};
            export LIBDIR_ppc="lib";
            export CFLAGS_ppc64=${CFLAGS_ppc64--m64};
            export CHOST_ppc64=${CTARGET};
            export CTARGET_ppc64=${CHOST_ppc64};
            export LIBDIR_ppc64="lib64";
            : ${MULTILIB_ABIS=ppc64 ppc};
            : ${DEFAULT_ABI=ppc64}
        ;;
        riscv64*)
            : ${MULTILIB_ABIS=lp64d lp64 ilp32d ilp32};
            : ${DEFAULT_ABI=lp64d};
            local __libdir_riscvdefaultabi_variable="LIBDIR_${DEFAULT_ABI}";
            local __libdir_riscvdefaultabi=${!__libdir_riscvdefaultabi_variable};
            export ${__libdir_riscvdefaultabi_variable}=${__libdir_riscvdefaultabi:-lib64};
            export CFLAGS_lp64d=${CFLAGS_lp64d--mabi=lp64d -march=rv64gc};
            export CHOST_lp64d=${CTARGET};
            export CTARGET_lp64d=${CTARGET};
            export LIBDIR_lp64d=${LIBDIR_lp64d-lib64/lp64d};
            export CFLAGS_lp64=${CFLAGS_lp64--mabi=lp64 -march=rv64imac};
            export CHOST_lp64=${CTARGET};
            export CTARGET_lp64=${CTARGET};
            export LIBDIR_lp64=${LIBDIR_lp64-lib64/lp64};
            export CFLAGS_ilp32d=${CFLAGS_ilp32d--mabi=ilp32d -march=rv32imafdc};
            export CHOST_ilp32d=${CTARGET/riscv64/riscv32};
            export CTARGET_ilp32d=${CTARGET/riscv64/riscv32};
            export LIBDIR_ilp32d=${LIBDIR_ilp32d-lib32/ilp32d};
            export CFLAGS_ilp32=${CFLAGS_ilp32--mabi=ilp32 -march=rv32imac};
            export CHOST_ilp32=${CTARGET/riscv64/riscv32};
            export CTARGET_ilp32=${CTARGET/riscv64/riscv32};
            export LIBDIR_ilp32=${LIBDIR_ilp32-lib32/ilp32}
        ;;
        riscv32*)
            : ${MULTILIB_ABIS=ilp32d ilp32};
            : ${DEFAULT_ABI=ilp32d};
            local __libdir_riscvdefaultabi_variable="LIBDIR_${DEFAULT_ABI}";
            local __libdir_riscvdefaultabi=${!__libdir_riscvdefaultabi_variable};
            export ${__libdir_riscvdefaultabi_variable}=${__libdir_riscvdefaultabi:-lib};
            export CFLAGS_ilp32d=${CFLAGS_ilp32d--mabi=ilp32d -march=rv32imafdc};
            export CHOST_ilp32d=${CTARGET};
            export CTARGET_ilp32d=${CTARGET};
            export LIBDIR_ilp32d=${LIBDIR_ilp32d-lib32/ilp32d};
            export CFLAGS_ilp32=${CFLAGS_ilp32--mabi=ilp32 -march=rv32imac};
            export CHOST_ilp32=${CTARGET};
            export CTARGET_ilp32=${CTARGET};
            export LIBDIR_ilp32=${LIBDIR_ilp32-lib32/ilp32}
        ;;
        s390x*)
            export CFLAGS_s390=${CFLAGS_s390--m31};
            export CHOST_s390=${CTARGET/s390x/s390};
            export CTARGET_s390=${CHOST_s390};
            export LIBDIR_s390="lib";
            export CFLAGS_s390x=${CFLAGS_s390x--m64};
            export CHOST_s390x=${CTARGET};
            export CTARGET_s390x=${CHOST_s390x};
            export LIBDIR_s390x="lib64";
            : ${MULTILIB_ABIS=s390x s390};
            : ${DEFAULT_ABI=s390x}
        ;;
        sparc64*)
            export CFLAGS_sparc32=${CFLAGS_sparc32--m32};
            export CHOST_sparc32=${CTARGET/sparc64/sparc};
            export CTARGET_sparc32=${CHOST_sparc32};
            export LIBDIR_sparc32="lib";
            export CFLAGS_sparc64=${CFLAGS_sparc64--m64};
            export CHOST_sparc64=${CTARGET};
            export CTARGET_sparc64=${CHOST_sparc64};
            export LIBDIR_sparc64="lib64";
            : ${MULTILIB_ABIS=sparc64 sparc32};
            : ${DEFAULT_ABI=sparc64}
        ;;
        *)
            : ${MULTILIB_ABIS=default};
            : ${DEFAULT_ABI=default}
        ;;
    esac;
    export MULTILIB_ABIS DEFAULT_ABI
}
multilib_foreach_abi () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local MULTIBUILD_VARIANTS=($(multilib_get_enabled_abi_pairs));
    multibuild_foreach_variant _multilib_multibuild_wrapper "${@}"
}
multilib_get_enabled_abi_pairs () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local abis=($(get_all_abis));
    local abi i found;
    for abi in "${abis[@]}";
    do
        for i in "${_MULTILIB_FLAGS[@]}";
        do
            local m_abis=${i#*:} m_abi;
            local m_flag=${i%:*};
            for m_abi in ${m_abis//,/ };
            do
                if [[ ${m_abi} == ${abi} ]] && { 
                    [[ ! -n "${MULTILIB_COMPAT[@]}" ]] || has "${m_flag}" "${MULTILIB_COMPAT[@]}"
                } && use "${m_flag}"; then
                    echo "${m_flag}.${abi}";
                    found=1;
                    break 2;
                fi;
            done;
        done;
    done;
    if [[ ! -n ${found} ]]; then
        local abi=${ABI:-${DEFAULT_ABI}};
        debug-print "${FUNCNAME}: no ABIs enabled, fallback to ${abi}";
        debug-print "${FUNCNAME}: ABI=${ABI}, DEFAULT_ABI=${DEFAULT_ABI}";
        echo ".${abi}";
    fi
}
multilib_get_enabled_abis () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local pairs=($(multilib_get_enabled_abi_pairs));
    echo "${pairs[@]#*.}"
}
multilib_install_wrappers () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    [[ ${#} -le 1 ]] || die "${FUNCNAME}: too many arguments";
    [[ ${COMPLETE_MULTILIB} == yes ]] && return;
    local root=${1:-${ED}};
    if [[ -d ${ED%/}/tmp/multilib-include ]]; then
        multibuild_merge_root "${ED%/}"/tmp/multilib-include "${root}"/usr/include;
        rmdir "${ED%/}"/tmp &> /dev/null;
    fi
}
multilib_is_native_abi () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    [[ ${#} -eq 0 ]] || die "${FUNCNAME}: too many arguments";
    [[ ${COMPLETE_MULTILIB} == yes || ${ABI} == ${DEFAULT_ABI} ]]
}
multilib_native_enable () 
{ 
    if multilib_is_native_abi; then
        echo "--enable-${1}${2+=${2}}";
    else
        echo "--disable-${1}";
    fi
}
multilib_native_use_enable () 
{ 
    if multilib_is_native_abi; then
        use_enable "${@}";
    else
        echo "--disable-${2:-${1}}";
    fi
}
multilib_native_use_with () 
{ 
    if multilib_is_native_abi; then
        use_with "${@}";
    else
        echo "--without-${2:-${1}}";
    fi
}
multilib_native_usex () 
{ 
    if multilib_is_native_abi; then
        usex "${@}";
    else
        echo "${3-no}${5}";
    fi
}
multilib_native_with () 
{ 
    if multilib_is_native_abi; then
        echo "--with-${1}${2+=${2}}";
    else
        echo "--without-${1}";
    fi
}
multilib_parallel_foreach_abi () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local MULTIBUILD_VARIANTS=($(multilib_get_enabled_abi_pairs));
    multibuild_foreach_variant _multilib_multibuild_wrapper "${@}"
}
multilib_prepare_wrappers () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    [[ ${#} -le 1 ]] || die "${FUNCNAME}: too many arguments";
    local root=${1:-${ED%/}};
    local f;
    if [[ ${COMPLETE_MULTILIB} == yes ]]; then
        for f in "${MULTILIB_CHOST_TOOLS[@]}";
        do
            f=${f#/};
            local dir=${f%/*};
            local fn=${f##*/};
            ln -s "${fn}" "${root}/${dir}/${CHOST}-${fn}" || die;
        done;
        return;
    fi;
    for f in "${MULTILIB_CHOST_TOOLS[@]}";
    do
        f=${f#/};
        local dir=${f%/*};
        local fn=${f##*/};
        if [[ -L ${root}/${f} ]]; then
            local target;
            target=$(readlink "${root}/${f}") || die;
            local target_dir target_fn=${target##*/};
            [[ ${target} == */* ]] && target_dir=${target%/*};
            ln -f -s "${target_dir+${target_dir}/}${CHOST}-${target_fn}" "${root}/${f}" || die;
        fi;
        mv "${root}/${f}" "${root}/${dir}/${CHOST}-${fn}" || die;
        if multilib_is_native_abi; then
            ln -s "${CHOST}-${fn}" "${root}/${f}" || die;
        fi;
    done;
    if [[ -n ${MULTILIB_WRAPPED_HEADERS[@]} ]]; then
        if [[ -n ${MULTILIB_ABI_FLAG} ]]; then
            for f in "${MULTILIB_WRAPPED_HEADERS[@]}";
            do
                f=${f#/};
                if [[ ${f} != usr/include/* ]]; then
                    die "Wrapping headers outside of /usr/include is not supported at the moment.";
                fi;
                f=${f#usr/include};
                local dir=${f%/*};
                if [[ -f ${root}/usr/include${f} ]]; then
                    local wrapper=${ED%/}/tmp/multilib-include${f};
                    if [[ ! -f ${ED%/}/tmp/multilib-include${f} ]]; then
                        dodir "/tmp/multilib-include${dir}";
                        cat > "${wrapper}" <<_EOF_ || 
/* This file is auto-generated by multilib-build.eclass
 * as a multilib-friendly wrapper. For the original content,
 * please see the files that are #included below.
 */

#if defined(__x86_64__) /* amd64 */
#	if defined(__ILP32__) /* x32 ABI */
#		error "abi_x86_x32 not supported by the package."
#	else /* 64-bit ABI */
#		error "abi_x86_64 not supported by the package."
#	endif
#elif defined(__i386__) /* plain x86 */
#	error "abi_x86_32 not supported by the package."
#elif defined(__mips__)
#	if(_MIPS_SIM == _ABIN32) /* n32 */
#		error "abi_mips_n32 not supported by the package."
#	elif(_MIPS_SIM == _ABI64) /* n64 */
#		error "abi_mips_n64 not supported by the package."
#	elif(_MIPS_SIM == _ABIO32) /* o32 */
#		error "abi_mips_o32 not supported by the package."
#	endif
#elif defined(__sparc__)
#	if defined(__arch64__)
#		error "abi_sparc_64 not supported by the package."
#	else
#		error "abi_sparc_32 not supported by the package."
#	endif
#elif defined(__s390__)
#	if defined(__s390x__)
#		error "abi_s390_64 not supported by the package."
#	else
#		error "abi_s390_32 not supported by the package."
#	endif
#elif defined(__powerpc__) || defined(__ppc__)
#	if defined(__powerpc64__) || defined(__ppc64__)
#		error "abi_ppc_64 not supported by the package."
#	else
#		error "abi_ppc_32 not supported by the package."
#	endif
#elif defined(SWIG) /* https://sourceforge.net/p/swig/bugs/799/ */
#	error "Native ABI not supported by the package."
#else
#	error "No ABI matched, please report a bug to bugs.gentoo.org"
#endif
_EOF_
 die;
                    fi
                    if ! grep -q "${MULTILIB_ABI_FLAG} " "${wrapper}"; then
                        die "Flag ${MULTILIB_ABI_FLAG} not listed in wrapper template. Please report a bug to https://bugs.gentoo.org.";
                    fi;
                    dodir "/tmp/multilib-include/${CHOST}${dir}";
                    mv "${root}/usr/include${f}" "${ED%/}/tmp/multilib-include/${CHOST}${dir}/" || die;
                    sed -e "/${MULTILIB_ABI_FLAG} /s&error.*&include <${CHOST}${f}>&" -i "${wrapper}" || die;
                    if multilib_is_native_abi; then
                        sed -e "/Native ABI/s&error.*&include <${CHOST}${f}>&" -i "${wrapper}" || die;
                    fi;
                fi;
            done;
        fi;
    fi
}
multilib_src_compile () 
{ 
    cmake_build distribution;
    pax-mark m "${BUILD_DIR}"/bin/llvm-rtdyld;
    pax-mark m "${BUILD_DIR}"/bin/lli;
    pax-mark m "${BUILD_DIR}"/bin/lli-child-target;
    if use test; then
        pax-mark m "${BUILD_DIR}"/unittests/ExecutionEngine/Orc/OrcJITTests;
        pax-mark m "${BUILD_DIR}"/unittests/ExecutionEngine/MCJIT/MCJITTests;
        pax-mark m "${BUILD_DIR}"/unittests/Support/SupportTests;
    fi
}
multilib_src_configure () 
{ 
    local ffi_cflags ffi_ldflags;
    if use libffi; then
        ffi_cflags=$($(tc-getPKG_CONFIG) --cflags-only-I libffi);
        ffi_ldflags=$($(tc-getPKG_CONFIG) --libs-only-L libffi);
    fi;
    local libdir=$(get_libdir);
    local mycmakeargs=(-DLLVM_APPEND_VC_REV=OFF -DCMAKE_INSTALL_PREFIX="${EPREFIX}/usr/lib/llvm/${SLOT}" -DLLVM_LIBDIR_SUFFIX=${libdir#lib} -DBUILD_SHARED_LIBS=OFF -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_LINK_LLVM_DYLIB=ON -DLLVM_DISTRIBUTION_COMPONENTS=$(get_distribution_components) -DLLVM_TARGETS_TO_BUILD="" -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD="${LLVM_TARGETS// /;}" -DLLVM_BUILD_TESTS=$(usex test) -DLLVM_ENABLE_FFI=$(usex libffi) -DLLVM_ENABLE_LIBEDIT=$(usex libedit) -DLLVM_ENABLE_TERMINFO=$(usex ncurses) -DLLVM_ENABLE_LIBXML2=$(usex xml) -DLLVM_ENABLE_ASSERTIONS=$(usex debug) -DLLVM_ENABLE_LIBPFM=$(usex exegesis) -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_Z3_SOLVER=$(usex z3) -DLLVM_HOST_TRIPLE="${CHOST}" -DFFI_INCLUDE_DIR="${ffi_cflags#-I}" -DFFI_LIBRARY_DIR="${ffi_ldflags#-L}" -DLLVM_HAVE_LIBXAR=$(multilib_native_usex xar 1 0) -DPython3_EXECUTABLE="${PYTHON}" -DOCAMLFIND=NO);
    if is_libcxx_linked; then
        mycmakeargs+=(-DLLVM_VERSION_SUFFIX="libcxx" -DLLVM_ENABLE_LIBCXX=ON);
    fi;
    mycmakeargs+=(-DGO_EXECUTABLE=GO_EXECUTABLE-NOTFOUND);
    use test && mycmakeargs+=(-DLLVM_LIT_ARGS="$(get_lit_flags)");
    if multilib_is_native_abi; then
        local build_docs=OFF;
        if llvm_are_manpages_built; then
            build_docs=ON;
            mycmakeargs+=(-DCMAKE_INSTALL_MANDIR="${EPREFIX}/usr/lib/llvm/${SLOT}/share/man" -DLLVM_INSTALL_SPHINX_HTML_DIR="${EPREFIX}/usr/share/doc/${PF}/html" -DSPHINX_WARNINGS_AS_ERRORS=OFF);
        fi;
        mycmakeargs+=(-DLLVM_BUILD_DOCS=${build_docs} -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_SPHINX=${build_docs} -DLLVM_ENABLE_DOXYGEN=OFF -DLLVM_INSTALL_UTILS=ON);
        use binutils-plugin && mycmakeargs+=(-DLLVM_BINUTILS_INCDIR="${EPREFIX}"/usr/include);
    fi;
    if tc-is-cross-compiler; then
        local tblgen="${EPREFIX}/usr/lib/llvm/${SLOT}/bin/llvm-tblgen";
        [[ -x "${tblgen}" ]] || die "${tblgen} not found or usable";
        mycmakeargs+=(-DCMAKE_CROSSCOMPILING=ON -DLLVM_TABLEGEN="${tblgen}");
    fi;
    if tc-is-gcc && [[ ${MULTILIB_ABI_FLAG} == abi_x86* ]] && [[ $(gcc-major-version) -eq 7 && $(gcc-minor-version) -lt 4 ]]; then
        local CFLAGS="${CFLAGS} -mno-bmi";
        local CXXFLAGS="${CXXFLAGS} -mno-bmi";
    fi;
    use x86 && local -x LDFLAGS="${LDFLAGS} -Wl,--no-keep-memory";
    use debug || local -x CPPFLAGS="${CPPFLAGS} -DNDEBUG";
    cmake_src_configure;
    multilib_is_native_abi && check_distribution_components
}
multilib_src_install () 
{ 
    DESTDIR=${D} cmake_build install-distribution;
    rm -rf "${ED}"/usr/include || die;
    mv "${ED}"/usr/lib/llvm/${SLOT}/include "${ED}"/usr/include || die;
    LLVM_LDPATHS+=("${EPREFIX}/usr/lib/llvm/${SLOT}/$(get_libdir)")
}
multilib_src_install_all () 
{ 
    local revord=$(( 9999 - ${SLOT} ));
    newenvd - "60llvm-${revord}" <<-_EOF_
PATH="${EPREFIX}/usr/lib/llvm/${SLOT}/bin"
# we need to duplicate it in ROOTPATH for Portage to respect...
ROOTPATH="${EPREFIX}/usr/lib/llvm/${SLOT}/bin"
MANPATH="${EPREFIX}/usr/lib/llvm/${SLOT}/share/man"
LDPATH="$( IFS=:; echo "${LLVM_LDPATHS[*]}" )"
_EOF_

    docompress "/usr/lib/llvm/${SLOT}/share/man";
    llvm_install_manpages
}
multilib_src_test () 
{ 
    local -x LIT_PRESERVES_TMP=1;
    cmake_build check
}
multilib_toolchain_setup () 
{ 
    local v vv;
    export ABI=$1;
    local save_restore_variables=(CBUILD CHOST AR CC CXX F77 FC LD NM OBJCOPY OBJDUMP PKG_CONFIG RANLIB READELF STRINGS STRIP PKG_CONFIG_LIBDIR PKG_CONFIG_PATH PKG_CONFIG_SYSTEM_INCLUDE_PATH PKG_CONFIG_SYSTEM_LIBRARY_PATH);
    if [[ ${_DEFAULT_ABI_SAVED} == "true" ]]; then
        for v in "${save_restore_variables[@]}";
        do
            vv="_abi_saved_${v}";
            [[ ${!vv+set} == "set" ]] && export ${v}="${!vv}" || unset ${v};
            unset ${vv};
        done;
        unset _DEFAULT_ABI_SAVED;
    fi;
    if [[ ${ABI} != ${DEFAULT_ABI} ]]; then
        for v in "${save_restore_variables[@]}";
        do
            vv="_abi_saved_${v}";
            [[ ${!v+set} == "set" ]] && export ${vv}="${!v}" || unset ${vv};
        done;
        export _DEFAULT_ABI_SAVED="true";
        if [[ ${CBUILD} == "${CHOST}" ]]; then
            export CBUILD=$(get_abi_CHOST $1);
        fi;
        export CHOST=$(get_abi_CHOST ${DEFAULT_ABI});
        export AR="$(tc-getAR)";
        export CC="$(tc-getCC) $(get_abi_CFLAGS)";
        export CXX="$(tc-getCXX) $(get_abi_CFLAGS)";
        export F77="$(tc-getF77) $(get_abi_CFLAGS)";
        export FC="$(tc-getFC) $(get_abi_CFLAGS)";
        export LD="$(tc-getLD) $(get_abi_LDFLAGS)";
        export NM="$(tc-getNM)";
        export OBJCOPY="$(tc-getOBJCOPY)";
        export OBJDUMP="$(tc-getOBJDUMP)";
        export PKG_CONFIG="$(tc-getPKG_CONFIG)";
        export RANLIB="$(tc-getRANLIB)";
        export READELF="$(tc-getREADELF)";
        export STRINGS="$(tc-getSTRINGS)";
        export STRIP="$(tc-getSTRIP)";
        export CHOST=$(get_abi_CHOST $1);
        export PKG_CONFIG_LIBDIR=${EPREFIX}/usr/$(get_libdir)/pkgconfig;
        export PKG_CONFIG_PATH=${EPREFIX}/usr/share/pkgconfig;
        export PKG_CONFIG_SYSTEM_INCLUDE_PATH=${EPREFIX}/usr/include;
        export PKG_CONFIG_SYSTEM_LIBRARY_PATH=${EPREFIX}/$(get_libdir):${EPREFIX}/usr/$(get_libdir);
    fi
}
no-as-needed () 
{ 
    [[ $# -ne 0 ]] && die "no-as-needed takes no arguments";
    case $($(tc-getLD) -v 2>&1 </dev/null) in 
        *GNU*)
            echo "-Wl,--no-as-needed"
        ;;
    esac
}
number_abis () 
{ 
    set -- `get_install_abis`;
    echo $#
}
path_exists () 
{ 
    eerror "path_exists has been removed.  Please see the following post";
    eerror "for a replacement snippet:";
    eerror "https://blogs.gentoo.org/mgorny/2018/08/09/inlining-path_exists/";
    die "path_exists is banned"
}
pax-mark () 
{ 
    local f;
    local flags;
    local ret=0;
    flags="${1//[!zPpEeMmRrSs]}";
    [[ -n "${flags}" ]] || return 0;
    shift;
    local dodefault="";
    [[ -n "${flags//[!z]}" ]] && dodefault="yes";
    if has PT ${PAX_MARKINGS}; then
        for f in "$@";
        do
            if type -p paxctl > /dev/null; then
                einfo "PT_PAX marking -${flags} ${f} with paxctl";
                paxctl -q${flags} "${f}" > /dev/null 2>&1 && continue;
            fi;
            if type -p paxctl-ng > /dev/null && paxctl-ng -L; then
                einfo "PT_PAX marking -${flags} ${f} with paxctl-ng";
                flags="${flags//z}";
                [[ ${dodefault} == "yes" ]] && paxctl-ng -L -z "${f}" > /dev/null 2>&1;
                [[ -n "${flags}" ]] || continue;
                paxctl-ng -L -${flags} "${f}" > /dev/null 2>&1 && continue;
            fi;
            if type -p scanelf > /dev/null && [[ ${PAX_MARKINGS} != "none" ]]; then
                einfo "PT_PAX marking -${flags} ${f} with scanelf";
                scanelf -Xxz ${flags} "$f" > /dev/null 2>&1;
            else
                if [[ ${PAX_MARKINGS} != "none" ]]; then
                    elog "Failed to set PT_PAX markings -${flags} ${f}.";
                    ret=1;
                fi;
            fi;
        done;
    fi;
    if has XT ${PAX_MARKINGS}; then
        flags="${flags//z}";
        for f in "$@";
        do
            if type -p paxctl-ng > /dev/null && paxctl-ng -l; then
                einfo "XATTR_PAX marking -${flags} ${f} with paxctl-ng";
                [[ ${dodefault} == "yes" ]] && paxctl-ng -d "${f}" > /dev/null 2>&1;
                [[ -n "${flags}" ]] || continue;
                paxctl-ng -l -${flags} "${f}" > /dev/null 2>&1 && continue;
            fi;
            if type -p setfattr > /dev/null; then
                [[ -n "${flags//[!Ee]}" ]] || flags+="e";
                einfo "XATTR_PAX marking -${flags} ${f} with setfattr";
                [[ ${dodefault} == "yes" ]] && setfattr -x "user.pax.flags" "${f}" > /dev/null 2>&1;
                setfattr -n "user.pax.flags" -v "${flags}" "${f}" > /dev/null 2>&1 && continue;
            fi;
            if [[ ${PAX_MARKINGS} != "none" ]]; then
                elog "Failed to set XATTR_PAX markings -${flags} ${f}.";
                ret=1;
            fi;
        done;
    fi;
    return ${ret}
}
pkg_nofetch () 
{ 
    default
}
pkg_postinst () 
{ 
    elog "You can find additional opt-viewer utility scripts in:";
    elog "  ${EROOT}/usr/lib/llvm/${SLOT}/share/opt-viewer";
    elog "To use these scripts, you will need Python along with the following";
    elog "packages:";
    elog "  dev-python/pygments (for opt-viewer)";
    elog "  dev-python/pyyaml (for all of them)"
}
pkg_setup () 
{ 
    python-any-r1_pkg_setup "$@"
}
python-any-r1_pkg_setup () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    [[ ${MERGE_TYPE} != binary ]] && python_setup
}
python_check_deps () 
{ 
    use doc || return 0;
    has_version -b "dev-python/recommonmark[${PYTHON_USEDEP}]" && has_version -b "dev-python/sphinx[${PYTHON_USEDEP}]"
}
python_doexe () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local f;
    for f in "$@";
    do
        python_newexe "${f}" "${f##*/}";
    done
}
python_doheader () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    [[ -n ${EPYTHON} ]] || die 'No Python implementation set (EPYTHON is null).';
    local includedir=$(python_get_includedir);
    local d=${includedir#${EPREFIX}};
    ( insopts -m 0644;
    insinto "${d}";
    doins -r "${@}" || return ${?} )
}
python_domodule () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    [[ -n ${EPYTHON} ]] || die 'No Python implementation set (EPYTHON is null).';
    local d;
    if [[ ${_PYTHON_MODULEROOT} == /* ]]; then
        d=${_PYTHON_MODULEROOT};
    else
        local sitedir=$(python_get_sitedir);
        d=${sitedir#${EPREFIX}}/${_PYTHON_MODULEROOT//.//};
    fi;
    ( insopts -m 0644;
    insinto "${d}";
    doins -r "${@}" || return ${?} );
    python_optimize "${ED%/}/${d}"
}
python_doscript () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local _PYTHON_REWRITE_SHEBANG=1;
    python_doexe "${@}"
}
python_export_utf8_locale () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    type locale &> /dev/null || return 0;
    if [[ $(locale charmap) != UTF-8 ]]; then
        local lang locales="C.UTF-8 en_US.UTF-8 en_GB.UTF-8 $(locale -a)";
        for lang in ${locales};
        do
            if [[ $(LC_ALL=${lang} locale charmap 2>/dev/null) == UTF-8 ]]; then
                if _python_check_locale_sanity "${lang}"; then
                    export LC_CTYPE=${lang};
                    if [[ -n ${LC_ALL} ]]; then
                        export LC_NUMERIC=${LC_ALL};
                        export LC_TIME=${LC_ALL};
                        export LC_COLLATE=${LC_ALL};
                        export LC_MONETARY=${LC_ALL};
                        export LC_MESSAGES=${LC_ALL};
                        export LC_PAPER=${LC_ALL};
                        export LC_NAME=${LC_ALL};
                        export LC_ADDRESS=${LC_ALL};
                        export LC_TELEPHONE=${LC_ALL};
                        export LC_MEASUREMENT=${LC_ALL};
                        export LC_IDENTIFICATION=${LC_ALL};
                        export LC_ALL=;
                    fi;
                    return 0;
                fi;
            fi;
        done;
        ewarn "Could not find a UTF-8 locale. This may trigger build failures in";
        ewarn "some python packages. Please ensure that a UTF-8 locale is listed in";
        ewarn "/etc/locale.gen and run locale-gen.";
        return 1;
    fi;
    return 0
}
python_fix_shebang () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    [[ -n ${EPYTHON} ]] || die "${FUNCNAME}: EPYTHON unset (pkg_setup not called?)";
    local PYTHON;
    _python_export "${EPYTHON}" PYTHON;
    local force quiet;
    while [[ -n ${@} ]]; do
        case "${1}" in 
            -f | --force)
                force=1;
                shift
            ;;
            -q | --quiet)
                quiet=1;
                shift
            ;;
            --)
                shift;
                break
            ;;
            *)
                break
            ;;
        esac;
    done;
    [[ -n ${1} ]] || die "${FUNCNAME}: no paths given";
    local path f;
    for path in "$@";
    do
        local any_fixed is_recursive;
        [[ -d ${path} ]] && is_recursive=1;
        while IFS= read -r -d '' f; do
            local shebang i;
            local error= match=;
            IFS= read -r shebang < "${f}";
            if [[ ${shebang} == '#!'* ]]; then
                local split_shebang=();
                read -r -a split_shebang <<< ${shebang#"#!"} || die;
                local in_path=${split_shebang[0]};
                local from='^#! *[^ ]*';
                if [[ ${in_path} == */env ]]; then
                    in_path=${split_shebang[1]};
                    from+=' *[^ ]*';
                fi;
                case ${in_path##*/} in 
                    "${EPYTHON}")
                        match=1
                    ;;
                    python | python[23])
                        match=1;
                        [[ ${in_path##*/} == python2 ]] && error=1
                    ;;
                    python[23].[0-9] | python3.[1-9][0-9] | pypy | pypy3 | jython[23].[0-9])
                        match=1;
                        error=1
                    ;;
                esac;
            fi;
            [[ -n ${force} ]] && error=;
            if [[ ! -n ${match} ]]; then
                [[ -n ${is_recursive} ]] && continue;
                error=1;
            fi;
            if [[ ! -n ${quiet} ]]; then
                einfo "Fixing shebang in ${f#${D%/}}.";
            fi;
            if [[ ! -n ${error} ]]; then
                debug-print "${FUNCNAME}: in file ${f#${D%/}}";
                debug-print "${FUNCNAME}: rewriting shebang: ${shebang}";
                sed -i -e "1s@${from}@#!${PYTHON}@" "${f}" || die;
                any_fixed=1;
            else
                eerror "The file has incompatible shebang:";
                eerror "  file: ${f#${D%/}}";
                eerror "  current shebang: ${shebang}";
                eerror "  requested impl: ${EPYTHON}";
                die "${FUNCNAME}: conversion of incompatible shebang requested";
            fi;
        done < <(find -H "${path}" -type f -print0 || die);
        if [[ ! -n ${any_fixed} ]]; then
            eerror "QA error: ${FUNCNAME}, ${path#${D%/}} did not match any fixable files.";
            eerror "There are no Python files in specified directory.";
            die "${FUNCNAME} did not match any fixable files";
        fi;
    done
}
python_gen_any_dep () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local depstr=${1};
    [[ -n ${depstr} ]] || die "No dependency string provided";
    local i PYTHON_PKG_DEP out=;
    for i in "${_PYTHON_SUPPORTED_IMPLS[@]}";
    do
        local PYTHON_USEDEP="python_targets_${i}(-)";
        local PYTHON_SINGLE_USEDEP="python_single_target_${i}(-)";
        _python_export "${i}" PYTHON_PKG_DEP;
        local i_depstr=${depstr//\$\{PYTHON_USEDEP\}/${PYTHON_USEDEP}};
        i_depstr=${i_depstr//\$\{PYTHON_SINGLE_USEDEP\}/${PYTHON_SINGLE_USEDEP}};
        out="( ${PYTHON_PKG_DEP%=} ${i_depstr} ) ${out}";
    done;
    echo "|| ( ${out})"
}
python_get_CFLAGS () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    _python_export "${@}" PYTHON_CFLAGS;
    echo "${PYTHON_CFLAGS}"
}
python_get_LIBS () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    _python_export "${@}" PYTHON_LIBS;
    echo "${PYTHON_LIBS}"
}
python_get_PYTHON_CONFIG () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    _python_export "${@}" PYTHON_CONFIG;
    echo "${PYTHON_CONFIG}"
}
python_get_includedir () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    _python_export "${@}" PYTHON_INCLUDEDIR;
    echo "${PYTHON_INCLUDEDIR}"
}
python_get_library_path () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    _python_export "${@}" PYTHON_LIBPATH;
    echo "${PYTHON_LIBPATH}"
}
python_get_scriptdir () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    _python_export "${@}" PYTHON_SCRIPTDIR;
    echo "${PYTHON_SCRIPTDIR}"
}
python_get_sitedir () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    _python_export "${@}" PYTHON_SITEDIR;
    echo "${PYTHON_SITEDIR}"
}
python_has_version () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local root_arg=(-b);
    case ${1} in 
        -b | -d | -r)
            root_arg=("${1}");
            shift
        ;;
    esac;
    if [[ ${EAPI} == 6 ]]; then
        if [[ ${root_arg} == -r ]]; then
            root_arg=();
        else
            root_arg=(--host-root);
        fi;
    fi;
    local pkg;
    for pkg in "$@";
    do
        ebegin "    ${pkg}";
        has_version "${root_arg[@]}" "${pkg}";
        eend ${?} || return;
    done;
    return 0
}
python_moduleinto () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    _PYTHON_MODULEROOT=${1}
}
python_newexe () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    [[ -n ${EPYTHON} ]] || die 'No Python implementation set (EPYTHON is null).';
    [[ ${#} -eq 2 ]] || die "Usage: ${FUNCNAME} <path> <new-name>";
    local wrapd=${_PYTHON_SCRIPTROOT:-/usr/bin};
    local f=${1};
    local newfn=${2};
    local scriptdir=$(python_get_scriptdir);
    local d=${scriptdir#${EPREFIX}};
    ( dodir "${wrapd}";
    exeopts -m 0755;
    exeinto "${d}";
    newexe "${f}" "${newfn}" || return ${?} );
    local dosym=dosym;
    [[ ${EAPI} == [67] ]] && dosym=dosym8;
    "${dosym}" -r /usr/lib/python-exec/python-exec2 "${wrapd}/${newfn}";
    if [[ -n ${_PYTHON_REWRITE_SHEBANG} ]]; then
        python_fix_shebang -q "${ED%/}/${d}/${newfn}";
    fi
}
python_newscript () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local _PYTHON_REWRITE_SHEBANG=1;
    python_newexe "${@}"
}
python_optimize () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    [[ -n ${EPYTHON} ]] || die 'No Python implementation set (EPYTHON is null).';
    local PYTHON=${PYTHON};
    [[ -n ${PYTHON} ]] || _python_export PYTHON;
    [[ -x ${PYTHON} ]] || die "PYTHON (${PYTHON}) is not executable";
    if [[ ${#} -eq 0 ]]; then
        local f;
        while IFS= read -r -d '' f; do
            if [[ ${f} == /* && -d ${D%/}${f} ]]; then
                set -- "${D%/}${f}" "${@}";
            fi;
        done < <(
			"${PYTHON}" - <<-EOF || die
				import sys
				print("".join(x + "\0" for x in sys.path))
			EOF
		);
        debug-print "${FUNCNAME}: using sys.path: ${*/%/;}";
    fi;
    local jobs=$(makeopts_jobs);
    local d;
    for d in "$@";
    do
        local instpath=${d#${D%/}};
        instpath=/${instpath##/};
        einfo "Optimize Python modules for ${instpath}";
        case "${EPYTHON}" in 
            python2.7 | python3.[34])
                "${PYTHON}" -m compileall -q -f -d "${instpath}" "${d}";
                "${PYTHON}" -OO -m compileall -q -f -d "${instpath}" "${d}"
            ;;
            python3.[5678] | pypy3)
                "${PYTHON}" -m compileall -j "${jobs}" -q -f -d "${instpath}" "${d}";
                "${PYTHON}" -O -m compileall -j "${jobs}" -q -f -d "${instpath}" "${d}";
                "${PYTHON}" -OO -m compileall -j "${jobs}" -q -f -d "${instpath}" "${d}"
            ;;
            python*)
                "${PYTHON}" -m compileall -j "${jobs}" -o 0 -o 1 -o 2 --hardlink-dupes -q -f -d "${instpath}" "${d}"
            ;;
            *)
                "${PYTHON}" -m compileall -q -f -d "${instpath}" "${d}"
            ;;
        esac;
    done
}
python_scriptinto () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    _PYTHON_SCRIPTROOT=${1}
}
python_setup () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    if [[ -n ${PYTHON_COMPAT_OVERRIDE} ]]; then
        local impls=(${PYTHON_COMPAT_OVERRIDE});
        [[ ${#impls[@]} -eq 1 ]] || die "PYTHON_COMPAT_OVERRIDE must name exactly one implementation for python-any-r1";
        ewarn "WARNING: PYTHON_COMPAT_OVERRIDE in effect. The following Python";
        ewarn "implementation will be used:";
        ewarn;
        ewarn "	${PYTHON_COMPAT_OVERRIDE}";
        ewarn;
        ewarn "Dependencies won't be satisfied, and EPYTHON/eselect-python will be ignored.";
        _python_export "${impls[0]}" EPYTHON PYTHON;
        _python_wrapper_setup;
        einfo "Using ${EPYTHON} to build (via PYTHON_COMPAT_OVERRIDE)";
        return;
    fi;
    local epython_impl=${EPYTHON/./_};
    if [[ -n ${epython_impl} ]]; then
        if ! has "${epython_impl}" "${_PYTHON_SUPPORTED_IMPLS[@]}"; then
            if ! has "${epython_impl}" "${_PYTHON_ALL_IMPLS[@]}"; then
                ewarn "Invalid EPYTHON: ${EPYTHON}";
            else
                einfo "EPYTHON (${EPYTHON}) not supported by the package";
            fi;
        else
            if _python_run_check_deps "${epython_impl}"; then
                _python_export EPYTHON PYTHON;
                _python_wrapper_setup;
                einfo "Using ${EPYTHON} to build (via EPYTHON)";
                return;
            fi;
        fi;
    fi;
    for ((i = ${#_PYTHON_SUPPORTED_IMPLS[@]} - 1; i >= 0; i-- ))
    do
        local impl=${_PYTHON_SUPPORTED_IMPLS[i]};
        [[ ${impl} == ${epython_impl} ]] && continue;
        _python_export "${impl}" EPYTHON PYTHON;
        if _python_run_check_deps "${impl}"; then
            _python_wrapper_setup;
            einfo "Using ${EPYTHON} to build (via PYTHON_COMPAT iteration)";
            return;
        fi;
    done;
    eerror "No Python implementation found for the build. This is usually";
    eerror "a bug in the ebuild. Please report it to bugs.gentoo.org";
    eerror "along with the build log.";
    echo;
    die "No supported Python implementation installed."
}
raw-ldflags () 
{ 
    local x input="$@";
    [[ -z ${input} ]] && input=${LDFLAGS};
    set --;
    for x in ${input};
    do
        case ${x} in 
            -Wl,*)
                x=${x#-Wl,};
                set -- "$@" ${x//,/ }
            ;;
            *)

            ;;
        esac;
    done;
    echo "$@"
}
replace-cpu-flags () 
{ 
    local newcpu="$#";
    newcpu="${!newcpu}";
    while [ $# -gt 1 ]; do
        replace-flags "-march=${1}" "-march=${newcpu}";
        replace-flags "-mcpu=${1}" "-mcpu=${newcpu}";
        replace-flags "-mtune=${1}" "-mtune=${newcpu}";
        shift;
    done;
    return 0
}
replace-flags () 
{ 
    [[ $# != 2 ]] && die "Usage: replace-flags <old flag> <new flag>";
    local f var new;
    for var in $(all-flag-vars);
    do
        new=();
        for f in ${!var};
        do
            [[ ${f} == ${1} ]] && f=${2};
            new+=("${f}");
        done;
        export ${var}="${new[*]}";
    done;
    return 0
}
replace-sparc64-flags () 
{ 
    [[ $# -ne 0 ]] && die "replace-sparc64-flags takes no arguments";
    local SPARC64_CPUS="ultrasparc3 ultrasparc v9";
    if [ "${CFLAGS/mtune}" != "${CFLAGS}" ]; then
        for x in ${SPARC64_CPUS};
        do
            CFLAGS="${CFLAGS/-mcpu=${x}/-mcpu=v8}";
        done;
    else
        for x in ${SPARC64_CPUS};
        do
            CFLAGS="${CFLAGS/-mcpu=${x}/-mcpu=v8 -mtune=${x}}";
        done;
    fi;
    if [ "${CXXFLAGS/mtune}" != "${CXXFLAGS}" ]; then
        for x in ${SPARC64_CPUS};
        do
            CXXFLAGS="${CXXFLAGS/-mcpu=${x}/-mcpu=v8}";
        done;
    else
        for x in ${SPARC64_CPUS};
        do
            CXXFLAGS="${CXXFLAGS/-mcpu=${x}/-mcpu=v8 -mtune=${x}}";
        done;
    fi;
    export CFLAGS CXXFLAGS
}
run_in_build_dir () 
{ 
    debug-print-function ${FUNCNAME} "${@}";
    local ret;
    [[ ${#} -ne 0 ]] || die "${FUNCNAME}: no command specified.";
    [[ -n ${BUILD_DIR} ]] || die "${FUNCNAME}: BUILD_DIR not set.";
    mkdir -p "${BUILD_DIR}" || die;
    pushd "${BUILD_DIR}" > /dev/null || die;
    "${@}";
    ret=${?};
    popd > /dev/null || die;
    return ${ret}
}
setup-allowed-flags () 
{ 
    [[ ${EAPI} == [567] ]] || die "Internal function ${FUNCNAME} is not available in EAPI ${EAPI}.";
    _setup-allowed-flags "$@"
}
src_compile () 
{ 
    multilib-minimal_src_compile "$@"
}
src_configure () 
{ 
    multilib-minimal_src_configure "$@"
}
src_install () 
{ 
    local MULTILIB_CHOST_TOOLS=(/usr/lib/llvm/${SLOT}/bin/llvm-config);
    local MULTILIB_WRAPPED_HEADERS=(/usr/include/llvm/Config/llvm-config.h);
    local LLVM_LDPATHS=();
    multilib-minimal_src_install;
    mv "${ED}"/usr/include "${ED}"/usr/lib/llvm/${SLOT}/include || die
}
src_prepare () 
{ 
    sed -i -e 's/xcrun/false/' utils/lit/lit/util.py || die;
    cp "${BROOT}/usr/share/gnuconfig/config.guess" cmake/ || die;
    check_live_ebuild;
    llvm.org_src_prepare
}
src_test () 
{ 
    multilib-minimal_src_test "$@"
}
src_unpack () 
{ 
    llvm.org_src_unpack "$@"
}
strip-flags () 
{ 
    [[ $# -ne 0 ]] && die "strip-flags takes no arguments";
    local x y var;
    local ALLOWED_FLAGS;
    _setup-allowed-flags;
    set -f;
    for var in $(all-flag-vars);
    do
        local new=();
        for x in ${!var};
        do
            for y in "${ALLOWED_FLAGS[@]}";
            do
                if [[ ${x} == ${y} ]]; then
                    new+=("${x}");
                    break;
                fi;
            done;
        done;
        if _is_flagq ${var} "-O*" && ! _is_flagq new "-O*"; then
            new+=(-O2);
        fi;
        if [[ ${!var} != "${new[*]}" ]]; then
            einfo "strip-flags: ${var}: changed '${!var}' to '${new[*]}'";
        fi;
        export ${var}="${new[*]}";
    done;
    set +f;
    return 0
}
strip-linguas () 
{ 
    local d f ls newls nols;
    if [[ $1 == "-i" ]] || [[ $1 == "-u" ]]; then
        local op=$1;
        shift;
        ls=$(find "$1" -name '*.po' -exec basename {} .po ';');
        shift;
        for d in "$@";
        do
            if [[ ${op} == "-u" ]]; then
                newls=${ls};
            else
                newls="";
            fi;
            for f in $(find "${d}" -name '*.po' -exec basename {} .po ';');
            do
                if [[ ${op} == "-i" ]]; then
                    has ${f} ${ls} && newls+=" ${f}";
                else
                    has ${f} ${ls} || newls+=" ${f}";
                fi;
            done;
            ls=${newls};
        done;
    else
        ls="$@";
    fi;
    nols="";
    newls="";
    for f in ${LINGUAS};
    do
        if has ${f} ${ls}; then
            newls+=" ${f}";
        else
            nols+=" ${f}";
        fi;
    done;
    [[ -n ${nols} ]] && einfo "Sorry, but ${PN} does not support the LINGUAS:" ${nols};
    export LINGUAS=${newls:1}
}
strip-unsupported-flags () 
{ 
    [[ $# -ne 0 ]] && die "strip-unsupported-flags takes no arguments";
    export CFLAGS=$(test-flags-CC ${CFLAGS});
    export CXXFLAGS=$(test-flags-CXX ${CXXFLAGS});
    export FFLAGS=$(test-flags-F77 ${FFLAGS});
    export FCFLAGS=$(test-flags-FC ${FCFLAGS});
    export LDFLAGS=$(test-flags-CCLD ${LDFLAGS})
}
tc-arch () 
{ 
    tc-ninja_magic_to_arch portage "$@"
}
tc-arch-kernel () 
{ 
    tc-ninja_magic_to_arch kern "$@"
}
tc-check-openmp () 
{ 
    if ! tc-has-openmp; then
        eerror "Your current compiler does not support OpenMP!";
        if tc-is-gcc; then
            eerror "Enable OpenMP support by building sys-devel/gcc with USE=\"openmp\".";
        else
            if tc-is-clang; then
                eerror "OpenMP support in sys-devel/clang is provided by sys-libs/libomp.";
            fi;
        fi;
        die "Active compiler does not have required support for OpenMP";
    fi
}
tc-cpp-is-true () 
{ 
    local CONDITION=${1};
    shift;
    $(tc-getTARGET_CPP) "${@}" -P - <<-EOF > /dev/null 2>&1
#if ${CONDITION}
true
#else
#error false
#endif
EOF

}
tc-detect-is-softfloat () 
{ 
    [[ $(tc-getTARGET_CPP) == "gcc -E" ]] && return 1;
    case ${CTARGET:-${CHOST}} in 
        *-newlib | *-elf | *-eabi)
            return 1
        ;;
        arm*)
            if tc-cpp-is-true "defined(__ARM_PCS_VFP)"; then
                echo "no";
            else
                if tc-cpp-is-true "defined(__SOFTFP__)"; then
                    echo "yes";
                else
                    echo "softfp";
                fi;
            fi;
            return 0
        ;;
        *)
            return 1
        ;;
    esac
}
tc-enables-pie () 
{ 
    tc-cpp-is-true "defined(__PIE__)" ${CPPFLAGS} ${CFLAGS}
}
tc-enables-ssp () 
{ 
    tc-cpp-is-true "defined(__SSP__) || defined(__SSP_STRONG__) || defined(__SSP_ALL__)" ${CPPFLAGS} ${CFLAGS}
}
tc-enables-ssp-all () 
{ 
    tc-cpp-is-true "defined(__SSP_ALL__)" ${CPPFLAGS} ${CFLAGS}
}
tc-enables-ssp-strong () 
{ 
    tc-cpp-is-true "defined(__SSP_STRONG__) || defined(__SSP_ALL__)" ${CPPFLAGS} ${CFLAGS}
}
tc-endian () 
{ 
    local host=$1;
    [[ -z ${host} ]] && host=${CTARGET:-${CHOST}};
    host=${host%%-*};
    case ${host} in 
        aarch64*be)
            echo big
        ;;
        aarch64)
            echo little
        ;;
        alpha*)
            echo little
        ;;
        arm*b*)
            echo big
        ;;
        arm*)
            echo little
        ;;
        cris*)
            echo little
        ;;
        hppa*)
            echo big
        ;;
        i?86*)
            echo little
        ;;
        ia64*)
            echo little
        ;;
        loongarch*)
            echo little
        ;;
        m68*)
            echo big
        ;;
        mips*l*)
            echo little
        ;;
        mips*)
            echo big
        ;;
        powerpc*le)
            echo little
        ;;
        powerpc*)
            echo big
        ;;
        riscv*)
            echo little
        ;;
        s390*)
            echo big
        ;;
        sh*b*)
            echo big
        ;;
        sh*)
            echo little
        ;;
        sparc*)
            echo big
        ;;
        x86_64*)
            echo little
        ;;
        *)
            echo wtf
        ;;
    esac
}
tc-env_build () 
{ 
    tc-export_build_env;
    CFLAGS=${BUILD_CFLAGS} CXXFLAGS=${BUILD_CXXFLAGS} CPPFLAGS=${BUILD_CPPFLAGS} LDFLAGS=${BUILD_LDFLAGS} AR=$(tc-getBUILD_AR) AS=$(tc-getBUILD_AS) CC=$(tc-getBUILD_CC) CPP=$(tc-getBUILD_CPP) CXX=$(tc-getBUILD_CXX) LD=$(tc-getBUILD_LD) NM=$(tc-getBUILD_NM) PKG_CONFIG=$(tc-getBUILD_PKG_CONFIG) RANLIB=$(tc-getBUILD_RANLIB) READELF=$(tc-getBUILD_READELF) "$@"
}
tc-export () 
{ 
    local var;
    for var in "$@";
    do
        [[ $(type -t "tc-get${var}") != "function" ]] && die "tc-export: invalid export variable '${var}'";
        "tc-get${var}" > /dev/null;
    done
}
tc-export_build_env () 
{ 
    tc-export "$@";
    if tc-is-cross-compiler; then
        : ${BUILD_CFLAGS:=-O1 -pipe};
        : ${BUILD_CXXFLAGS:=-O1 -pipe};
        : ${BUILD_CPPFLAGS:= };
        : ${BUILD_LDFLAGS:= };
    else
        : ${BUILD_CFLAGS:=${CFLAGS}};
        : ${BUILD_CXXFLAGS:=${CXXFLAGS}};
        : ${BUILD_CPPFLAGS:=${CPPFLAGS}};
        : ${BUILD_LDFLAGS:=${LDFLAGS}};
    fi;
    export BUILD_{C,CXX,CPP,LD}FLAGS;
    local v;
    for v in BUILD_{C,CXX,CPP,LD}FLAGS;
    do
        export ${v#BUILD_}_FOR_BUILD="${!v}";
    done
}
tc-get-compiler-type () 
{ 
    local code='
#if defined(__PATHSCALE__)
	HAVE_PATHCC
#elif defined(__clang__)
	HAVE_CLANG
#elif defined(__GNUC__)
	HAVE_GCC
#endif
';
    local res=$($(tc-getCPP "$@") -E -P - <<<"${code}");
    case ${res} in 
        *HAVE_PATHCC*)
            echo pathcc
        ;;
        *HAVE_CLANG*)
            echo clang
        ;;
        *HAVE_GCC*)
            echo gcc
        ;;
        *)
            echo unknown
        ;;
    esac
}
tc-getAR () 
{ 
    tc-getPROG AR ar "$@"
}
tc-getAS () 
{ 
    tc-getPROG AS as "$@"
}
tc-getBUILD_AR () 
{ 
    tc-getBUILD_PROG AR ar "$@"
}
tc-getBUILD_AS () 
{ 
    tc-getBUILD_PROG AS as "$@"
}
tc-getBUILD_CC () 
{ 
    tc-getBUILD_PROG CC gcc "$@"
}
tc-getBUILD_CPP () 
{ 
    tc-getBUILD_PROG CPP "$(tc-getBUILD_CC) -E" "$@"
}
tc-getBUILD_CXX () 
{ 
    tc-getBUILD_PROG CXX g++ "$@"
}
tc-getBUILD_LD () 
{ 
    tc-getBUILD_PROG LD ld "$@"
}
tc-getBUILD_NM () 
{ 
    tc-getBUILD_PROG NM nm "$@"
}
tc-getBUILD_OBJCOPY () 
{ 
    tc-getBUILD_PROG OBJCOPY objcopy "$@"
}
tc-getBUILD_PKG_CONFIG () 
{ 
    tc-getBUILD_PROG PKG_CONFIG pkg-config "$@"
}
tc-getBUILD_PROG () 
{ 
    local vars="BUILD_$1 $1_FOR_BUILD HOST$1";
    tc-is-cross-compiler || vars+=" $1";
    _tc-getPROG CBUILD "${vars}" "${@:2}"
}
tc-getBUILD_RANLIB () 
{ 
    tc-getBUILD_PROG RANLIB ranlib "$@"
}
tc-getBUILD_READELF () 
{ 
    tc-getBUILD_PROG READELF readelf "$@"
}
tc-getBUILD_STRINGS () 
{ 
    tc-getBUILD_PROG STRINGS strings "$@"
}
tc-getBUILD_STRIP () 
{ 
    tc-getBUILD_PROG STRIP strip "$@"
}
tc-getCC () 
{ 
    tc-getPROG CC gcc "$@"
}
tc-getCPP () 
{ 
    tc-getPROG CPP "${CC:-gcc} -E" "$@"
}
tc-getCXX () 
{ 
    tc-getPROG CXX g++ "$@"
}
tc-getDLLWRAP () 
{ 
    tc-getPROG DLLWRAP dllwrap "$@"
}
tc-getF77 () 
{ 
    tc-getPROG F77 gfortran "$@"
}
tc-getFC () 
{ 
    tc-getPROG FC gfortran "$@"
}
tc-getGCJ () 
{ 
    tc-getPROG GCJ gcj "$@"
}
tc-getGO () 
{ 
    tc-getPROG GO gccgo "$@"
}
tc-getLD () 
{ 
    tc-getPROG LD ld "$@"
}
tc-getNM () 
{ 
    tc-getPROG NM nm "$@"
}
tc-getOBJCOPY () 
{ 
    tc-getPROG OBJCOPY objcopy "$@"
}
tc-getOBJDUMP () 
{ 
    tc-getPROG OBJDUMP objdump "$@"
}
tc-getPKG_CONFIG () 
{ 
    tc-getPROG PKG_CONFIG pkg-config "$@"
}
tc-getPROG () 
{ 
    _tc-getPROG CHOST "$@"
}
tc-getRANLIB () 
{ 
    tc-getPROG RANLIB ranlib "$@"
}
tc-getRC () 
{ 
    tc-getPROG RC windres "$@"
}
tc-getREADELF () 
{ 
    tc-getPROG READELF readelf "$@"
}
tc-getSTRINGS () 
{ 
    tc-getPROG STRINGS strings "$@"
}
tc-getSTRIP () 
{ 
    tc-getPROG STRIP strip "$@"
}
tc-getTARGET_CPP () 
{ 
    if [[ -n ${CTARGET} ]]; then
        _tc-getPROG CTARGET TARGET_CPP "gcc -E" "$@";
    else
        tc-getCPP "$@";
    fi
}
tc-has-openmp () 
{ 
    local base="${T}/test-tc-openmp";
    cat <<-EOF > "${base}.c"
#include <omp.h>
int main() {
int nthreads, tid, ret = 0;
#pragma omp parallel private(nthreads, tid)
{
tid = omp_get_thread_num();
nthreads = omp_get_num_threads(); ret += tid + nthreads;
}
return ret;
}
EOF

    $(tc-getCC "$@") -fopenmp "${base}.c" -o "${base}" &> /dev/null;
    local ret=$?;
    rm -f "${base}"*;
    return ${ret}
}
tc-has-tls () 
{ 
    local base="${T}/test-tc-tls";
    cat <<-EOF > "${base}.c"
int foo(int *i) {
static __thread int j = 0;
return *i ? j : *i;
}
EOF

    local flags;
    case $1 in 
        -s)
            flags="-S"
        ;;
        -c)
            flags="-c"
        ;;
        -l)

        ;;
        -*)
            die "Usage: tc-has-tls [-c|-l] [toolchain prefix]"
        ;;
    esac;
    : ${flags:=-fPIC -shared -Wl,-z,defs};
    [[ $1 == -* ]] && shift;
    $(tc-getCC "$@") ${flags} "${base}.c" -o "${base}" &> /dev/null;
    local ret=$?;
    rm -f "${base}"*;
    return ${ret}
}
tc-is-clang () 
{ 
    [[ $(tc-get-compiler-type) == clang ]]
}
tc-is-cross-compiler () 
{ 
    [[ ${CBUILD:-${CHOST}} != ${CHOST} ]]
}
tc-is-gcc () 
{ 
    [[ $(tc-get-compiler-type) == gcc ]]
}
tc-is-softfloat () 
{ 
    tc-detect-is-softfloat || tc-tuple-is-softfloat
}
tc-is-static-only () 
{ 
    local host=${CTARGET:-${CHOST}};
    [[ ${host} == *-mint* ]]
}
tc-ld-disable-gold () 
{ 
    tc-ld-is-gold "$@" && tc-ld-force-bfd "$@"
}
tc-ld-force-bfd () 
{ 
    if ! tc-ld-is-gold "$@" && ! tc-ld-is-lld "$@"; then
        return;
    fi;
    ewarn "Forcing usage of the BFD linker";
    local ld=$(tc-getLD "$@");
    local bfd_ld="${ld%% *}.bfd";
    local path_ld=$(which "${bfd_ld}" 2>/dev/null);
    [[ -e ${path_ld} ]] && export LD=${bfd_ld};
    local fallback="true";
    if tc-is-gcc; then
        local major=$(gcc-major-version "$@");
        local minor=$(gcc-minor-version "$@");
        if [[ ${major} -gt 4 ]] || [[ ${major} -eq 4 && ${minor} -ge 8 ]]; then
            export LDFLAGS="${LDFLAGS} -fuse-ld=bfd";
            fallback="false";
        fi;
    else
        if tc-is-clang; then
            local major=$(clang-major-version "$@");
            local minor=$(clang-minor-version "$@");
            if [[ ${major} -gt 3 ]] || [[ ${major} -eq 3 && ${minor} -ge 5 ]]; then
                export LDFLAGS="${LDFLAGS} -fuse-ld=bfd";
                fallback="false";
            fi;
        fi;
    fi;
    if [[ ${fallback} == "true" ]]; then
        if [[ -e ${path_ld} ]]; then
            local d="${T}/bfd-linker";
            mkdir -p "${d}";
            ln -sf "${path_ld}" "${d}"/ld;
            export LDFLAGS="${LDFLAGS} -B${d}";
        else
            die "unable to locate a BFD linker";
        fi;
    fi
}
tc-ld-is-gold () 
{ 
    local out;
    out=$($(tc-getLD "$@") --version 2>&1);
    if [[ ${out} == *"GNU gold"* ]]; then
        return 0;
    fi;
    local base="${T}/test-tc-gold";
    cat <<-EOF > "${base}.c"
int main() { return 0; }
EOF

    out=$($(tc-getCC "$@") ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} -Wl,--version "${base}.c" -o "${base}" 2>&1);
    rm -f "${base}"*;
    if [[ ${out} == *"GNU gold"* ]]; then
        return 0;
    fi;
    return 1
}
tc-ld-is-lld () 
{ 
    local out;
    out=$($(tc-getLD "$@") --version 2>&1);
    if [[ ${out} == *"LLD"* ]]; then
        return 0;
    fi;
    local base="${T}/test-tc-lld";
    cat <<-EOF > "${base}.c"
int main() { return 0; }
EOF

    out=$($(tc-getCC "$@") ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} -Wl,--version "${base}.c" -o "${base}" 2>&1);
    rm -f "${base}"*;
    if [[ ${out} == *"LLD"* ]]; then
        return 0;
    fi;
    return 1
}
tc-ninja_magic_to_arch () 
{ 
    function ninj () 
    { 
        [[ ${type} == "kern" ]] && echo $1 || echo $2
    };
    local type=$1;
    local host=$2;
    [[ -z ${host} ]] && host=${CTARGET:-${CHOST}};
    case ${host} in 
        aarch64*)
            echo arm64
        ;;
        alpha*)
            echo alpha
        ;;
        arm*)
            echo arm
        ;;
        avr*)
            ninj avr32 avr
        ;;
        bfin*)
            ninj blackfin bfin
        ;;
        c6x*)
            echo c6x
        ;;
        cris*)
            echo cris
        ;;
        frv*)
            echo frv
        ;;
        hexagon*)
            echo hexagon
        ;;
        hppa*)
            ninj parisc hppa
        ;;
        i?86*)
            if [[ ${type} == "kern" && ${host} == *freebsd* ]]; then
                echo i386;
            else
                echo x86;
            fi
        ;;
        ia64*)
            echo ia64
        ;;
        loongarch*)
            ninj loongarch loong
        ;;
        m68*)
            echo m68k
        ;;
        metag*)
            echo metag
        ;;
        microblaze*)
            echo microblaze
        ;;
        mips*)
            echo mips
        ;;
        nios2*)
            echo nios2
        ;;
        nios*)
            echo nios
        ;;
        or1k* | or32*)
            echo openrisc
        ;;
        powerpc*)
            if [[ ${type} == "kern" ]]; then
                echo powerpc;
            else
                if [[ ${host} == powerpc64* ]]; then
                    echo ppc64;
                else
                    echo ppc;
                fi;
            fi
        ;;
        riscv*)
            echo riscv
        ;;
        s390*)
            echo s390
        ;;
        score*)
            echo score
        ;;
        sh64*)
            ninj sh64 sh
        ;;
        sh*)
            echo sh
        ;;
        sparc64*)
            ninj sparc64 sparc
        ;;
        sparc*)
            [[ ${PROFILE_ARCH} == "sparc64" ]] && ninj sparc64 sparc || echo sparc
        ;;
        tile*)
            echo tile
        ;;
        vax*)
            echo vax
        ;;
        x86_64*freebsd*)
            echo amd64
        ;;
        x86_64*)
            if [[ ${type} == "kern" ]]; then
                echo x86;
            else
                echo amd64;
            fi
        ;;
        xtensa*)
            echo xtensa
        ;;
        *)
            echo unknown
        ;;
    esac
}
tc-stack-grows-down () 
{ 
    case ${ARCH} in 
        hppa | metag)
            return 1
        ;;
    esac;
    return 0
}
tc-tuple-is-softfloat () 
{ 
    local CTARGET=${CTARGET:-${CHOST}};
    case ${CTARGET//_/-} in 
        bfin* | h8300*)
            echo "only"
        ;;
        *-softfloat-*)
            echo "yes"
        ;;
        *-softfp-*)
            echo "softfp"
        ;;
        arm*-hardfloat-* | arm*eabihf)
            echo "no"
        ;;
        *-newlib | *-elf | *-eabi)
            echo "no"
        ;;
        arm*)
            echo "yes"
        ;;
        *)
            echo "no"
        ;;
    esac
}
test-flag-CC () 
{ 
    _test-flag-PROG CC c "$@"
}
test-flag-CCLD () 
{ 
    _test-flag-PROG CC c+ld "$@"
}
test-flag-CXX () 
{ 
    _test-flag-PROG CXX c++ "$@"
}
test-flag-F77 () 
{ 
    _test-flag-PROG F77 f77 "$@"
}
test-flag-FC () 
{ 
    _test-flag-PROG FC f95 "$@"
}
test-flag-PROG () 
{ 
    [[ ${EAPI} == [567] ]] || die "Internal function ${FUNCNAME} is not available in EAPI ${EAPI}.";
    _test-flag-PROG "$@"
}
test-flags () 
{ 
    test-flags-CC "$@"
}
test-flags-CC () 
{ 
    _test-flags-PROG CC "$@"
}
test-flags-CCLD () 
{ 
    _test-flags-PROG CCLD "$@"
}
test-flags-CXX () 
{ 
    _test-flags-PROG CXX "$@"
}
test-flags-F77 () 
{ 
    _test-flags-PROG F77 "$@"
}
test-flags-FC () 
{ 
    _test-flags-PROG FC "$@"
}
test-flags-PROG () 
{ 
    [[ ${EAPI} == [567] ]] || die "Internal function ${FUNCNAME} is not available in EAPI ${EAPI}.";
    _test-flags-PROG "$@"
}
test_version_info () 
{ 
    if [[ $($(tc-getCC) --version 2>&1) == *$1* ]]; then
        return 0;
    else
        return 1;
    fi
}
use_if_iuse () 
{ 
    eqawarn "use_if_iuse is deprecated.";
    eqawarn "Define it as a local function, or inline it:";
    eqawarn "    in_iuse foo && use foo";
    in_iuse $1 || return 1;
    use $1
}
ver_cut () 
{ 
    local range=${1};
    local v=${2:-${PV}};
    local start end;
    local -a comp;
    __eapi7_ver_split "${v}";
    local max=$((${#comp[@]}/2));
    __eapi7_ver_parse_range "${range}" "${max}";
    local IFS=;
    if [[ ${start} -gt 0 ]]; then
        start=$(( start*2 - 1 ));
    fi;
    echo "${comp[*]:start:end*2-start}"
}
ver_rs () 
{ 
    local v;
    (( ${#} & 1 )) && v=${@: -1} || v=${PV};
    local start end i;
    local -a comp;
    __eapi7_ver_split "${v}";
    local max=$((${#comp[@]}/2 - 1));
    while [[ ${#} -ge 2 ]]; do
        __eapi7_ver_parse_range "${1}" "${max}";
        for ((i = start*2; i <= end*2; i+=2 ))
        do
            [[ ${i} -eq 0 && -z ${comp[i]} ]] && continue;
            comp[i]=${2};
        done;
        shift 2;
    done;
    local IFS=;
    echo "${comp[*]}"
}
ver_test () 
{ 
    local va op vb;
    if [[ $# -eq 3 ]]; then
        va=${1};
        shift;
    else
        va=${PVR};
    fi;
    [[ $# -eq 2 ]] || die "${FUNCNAME}: bad number of arguments";
    op=${1};
    vb=${2};
    case ${op} in 
        -eq | -ne | -lt | -le | -gt | -ge)

        ;;
        *)
            die "${FUNCNAME}: invalid operator: ${op}"
        ;;
    esac;
    __eapi7_ver_compare "${va}" "${vb}";
    test $? "${op}" 2
}
xdg_desktop_database_update () 
{ 
    if [[ ${EBUILD_PHASE} != post* ]]; then
        die "xdg_desktop_database_update must be used in pkg_post* phases.";
    fi;
    if ! type update-desktop-database &> /dev/null; then
        debug-print "update-desktop-database is not found";
        return;
    fi;
    ebegin "Updating .desktop files database";
    update-desktop-database -q "${EROOT%/}${DESKTOP_DATABASE_DIR}";
    eend $?
}
xdg_environment_reset () 
{ 
    export XDG_DATA_HOME="${HOME}/.local/share";
    export XDG_CONFIG_HOME="${HOME}/.config";
    export XDG_CACHE_HOME="${HOME}/.cache";
    export XDG_RUNTIME_DIR="${T}/run";
    mkdir -p "${XDG_DATA_HOME}" "${XDG_CONFIG_HOME}" "${XDG_CACHE_HOME}" "${XDG_RUNTIME_DIR}" || die;
    chmod 0700 "${XDG_RUNTIME_DIR}" || die;
    unset DBUS_SESSION_BUS_ADDRESS
}
xdg_icon_cache_update () 
{ 
    if [[ ${EBUILD_PHASE} != post* ]]; then
        die "xdg_icon_cache_update must be used in pkg_post* phases.";
    fi;
    if ! type gtk-update-icon-cache &> /dev/null; then
        debug-print "gtk-update-icon-cache is not found";
        return;
    fi;
    ebegin "Updating icons cache";
    local dir retval=0;
    local fails=();
    for dir in "${EROOT%/}"/usr/share/icons/*;
    do
        if [[ -f ${dir}/index.theme ]]; then
            if ! gtk-update-icon-cache -qf "${dir}"; then
                debug-print "Updating cache failed on ${dir}";
                fails+=("${dir}");
                retval=2;
            fi;
        else
            if [[ $(ls "${dir}") = icon-theme.cache ]]; then
                rm "${dir}/icon-theme.cache";
            fi;
        fi;
        if [[ -z $(ls "${dir}") ]]; then
            rmdir "${dir}";
        fi;
    done;
    eend ${retval};
    for dir in "${fails[@]}";
    do
        eerror "Failed to update cache with icon ${dir}";
    done
}
xdg_mimeinfo_database_update () 
{ 
    if [[ ${EBUILD_PHASE} != post* ]]; then
        die "xdg_mimeinfo_database_update must be used in pkg_post* phases.";
    fi;
    if ! type update-mime-database &> /dev/null; then
        debug-print "update-mime-database is not found";
        return;
    fi;
    local -x PKGSYSTEM_ENABLE_FSYNC=0;
    ebegin "Updating shared mime info database";
    update-mime-database "${EROOT%/}${MIMEINFO_DATABASE_DIR}";
    eend $?
}
